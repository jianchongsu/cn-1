<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
 
 <title>怡然轩</title>
 <link href="http://yixuan.github.com/atom.xml" rel="self"/>
 <link href="http://yixuan.github.com"/>
 <updated>2012-03-04T13:28:56+08:00</updated>
 <id>http://yixuan.github.com</id>
 <author>
   <name>yixuan</name>
   <email>yixuan.qiu@cos.name</email>
 </author>

 
 <entry>
   <title>你好，世界！</title>
   <link href="http://yixuan.github.com/2012/03/hello-world"/>
   <updated>2012-03-01T00:00:00+08:00</updated>
   <id>hhttp://yixuan.github.com/2012/03/hello-world</id>
   <content type="html">&lt;p&gt;你好，世界！&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Julia来了</title>
   <link href="http://yixuan.github.com/2012/02/julia-comes"/>
   <updated>2012-02-28T00:18:31+08:00</updated>
   <id>hhttp://yixuan.github.com/2012/02/julia-comes</id>
   <content type="html">&lt;blockquote&gt;
&lt;h2 id='in_short_because_we_are_greedy'&gt;&lt;em&gt;In short, because we are greedy.&lt;/em&gt;&lt;/h2&gt;
&lt;/blockquote&gt;

&lt;p&gt;今天看到一篇文章，是&lt;a href='http://sd.csdn.net/a/20120223/312315.html'&gt;介绍一门编程语言Julia的&lt;/a&gt;。文章底下的评论有些扎眼，建议移步看它的&lt;a href='http://julialang.org/blog/2012/02/why-we-created-julia/'&gt;英文原文&lt;/a&gt;。文章的作者，同时也是这门语言的创始人之一，&lt;a href='http://karpinski.org/'&gt;Stefan Karpinski&lt;/a&gt;，目前是加州大学圣踏芭芭拉分校的一名博士生，但曾经在若干家企业工作过。他自称是一名数据科学家和应用数学家，最近发表的一篇论文题目叫作_Non-Parametric Discrete Mixture Model Recovery via NNMF_。看到这里我隐约感觉到，这门语言有可能是我感兴趣的。&lt;/p&gt;

&lt;p&gt;为什么又来了一种语言？作者给出的回答就是第一段的那句话——因为我们贪得无厌。我们想要C的速度，想要Python的通用性，想要R的统计，想要Matlab的代数运算，想要很多很多以及更多。Julia是否能成为这样的一门编程语言我目前还无法预知，但它目前的一些特性确实让我眼前一亮。&lt;/p&gt;

&lt;h3 id='rmatlab'&gt;与R及Matlab相似的语法&lt;/h3&gt;

&lt;p&gt;Julia的官方网站是&lt;a href='http://julialang.org/'&gt;http://julialang.org/&lt;/a&gt;，源代码放置在github上，地址是&lt;a href='https://github.com/JuliaLang/julia'&gt;https://github.com/JuliaLang/julia&lt;/a&gt;。从中可以看到一些示例的代码，典型的Matlab风格，但好在与R的差距并不是很大，像我依葫芦画瓢也能写出一些比较简单的代码来，比如下面就是用一个暴力的二重循环来生成一个1000&lt;em&gt;1000的均匀分布随机数矩阵，并计算所有元素之和。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Julia:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function fun1j()
    m = zeros(1000, 1000)
    s = 0
    for i = 1:1000
        for j = 1:1000
            m[i, j] = rand()
            s = s + m[i, j]
        end
    end
    s
end&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;与之等价的R程序是&lt;/p&gt;

&lt;p&gt;R:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fun1r = function() {
    m = matrix(0, 1000, 1000)
    s = 0
    for(i in 1:1000)
    {
        for(j in 1:1000)
        {
            m[i, j] = runif(1)
            s = s + m[i, j]
        }
    }
    s
}&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='id349'&gt;速度&lt;/h3&gt;

&lt;p&gt;速度应该是所有的编程语言都要考虑的内容。我们都知道R的痛点在哪儿，像上面的这个R程序照常理是要挨板子的，但我们还是看看它的运行时间。在我的电脑上（就不贴硬件参数了），运行时间大概为：&lt;/p&gt;

&lt;p&gt;R:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; system.time(fun1r())
  用户  系统   流逝
5.769 0.004 5.782&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后在Julia中，&lt;/p&gt;

&lt;p&gt;Julia:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; @elapsed fun1j()
0.09904909133911133&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是的你没看错，只有不到0.1秒。&lt;/p&gt;

&lt;p&gt;但这并不是一次有意义的对比，因为上述过程是可以被向量化的。我们用R来把这段程序优化一下：&lt;/p&gt;

&lt;p&gt;R:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;fun1optr = function() {
    m = matrix(runif(1000 * 1000), 1000, 1000)
    sum(m)
}

&amp;gt; system.time(fun1opt())
  用户  系统   流逝
0.048 0.000 0.051&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同样地，Julia也进行改写：&lt;/p&gt;

&lt;p&gt;Julia:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function fun1optj()
    m = rand(1000, 1000)
    sum(m)
end

julia&amp;gt; @elapsed fun1optj()
0.008805990219116211&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;相信结果已经很清楚了。&lt;/p&gt;

&lt;h3 id='id350'&gt;有理数&lt;/h3&gt;

&lt;p&gt;这可能只是一项很小的功能，但有些时候还是很方便的。Julia用&lt;code&gt;//&lt;/code&gt;表示有理数除法，比如&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;julia&amp;gt; 1//2
1//2

julia&amp;gt; 11//22
1//2

julia&amp;gt; 987//654 + 12//34 * 56//78
84917//48178&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id='id351'&gt;并行&lt;/h3&gt;

&lt;p&gt;Julia是一门刚诞生不久的语言，因此它尽可能地采用了最新的设计理念来应对当前的问题，其中对并行的支持是很重要的一点。&lt;/p&gt;

&lt;p&gt;要让Julia使用多个CPU或多个核，需要在启动时加上相应的参数，例如下面的命令表示让Julia程序启用2个处理器：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./julia -p 2&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Julia提供了许多内置的函数来支持多核的运算，在此引用Julia文档中的一个例子，具体的信息可以在&lt;a href='http://julialang.org/manual/parallel-computing/'&gt;这个页面&lt;/a&gt;中获取。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;M = {rand(1000,1000) | i=1:10}
pmap(svd, M)&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以上程序就是对10个大矩阵进行并行的奇异值分解。&lt;/p&gt;

&lt;h3 id='id352'&gt;接下来的事&lt;/h3&gt;

&lt;p&gt;由于时间所限，这里举的都是非常基础的一些例子，而Julia的开发应该说也还是刚刚起步。目前Julia只支持类UNIX系统，如Linux和Mac，已经编译好的二进制文件可以在&lt;a href='https://github.com/JuliaLang/julia/downloads'&gt;这里&lt;/a&gt;下载。&lt;/p&gt;

&lt;p&gt;Julia会不会成为R的一个良好替代，现在还都是未知，但有一点是肯定的，那就是无论一门语言多么优秀，其生命力永远是由用它的人决定的。R的成功，一部分源于其本身的设计，而更重要的是其背后存在一个强大的开源社区。这里有&lt;a href='http://groups.google.com/group/julia-dev/browse_thread/thread/9f79ed4f8334830a'&gt;一个关于R与Julia的讨论&lt;/a&gt;，其中Julia的另一名开发者Viral Shah说了一句特别有意思的话：&amp;#8221;What should julia do in order to provide an alternative to R? In my opinion, it is R&amp;#8217;s libraries and its community that define it - rather than the language design or its implementation.&amp;#8221;&lt;/p&gt;

&lt;p&gt;R与Julia的未来发展会如何？我们拭目以待。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>用R读取Excel的新方法</title>
   <link href="http://yixuan.github.com/2012/01/new-method-to-read-excel-file-in-r"/>
   <updated>2012-01-18T16:16:48+08:00</updated>
   <id>hhttp://yixuan.github.com/2012/01/new-method-to-read-excel-file-in-r</id>
   <content type="html">&lt;p&gt;还在纠结用如何用R读取Excel的同学有福了。昨天逛CRAN的时候发现了一个xlsx包，它给出的介绍是可以读取、写入Excel 2007/2003文件并支持格式的设置。简单地来说，将Excel读取为数据框，以及将数据框写入为Excel文件都不是问题，而更加强大的是它能处理Excel中的格式，比如合并单元格，设置列的宽度，设置字体和颜色等等。&lt;/p&gt;

&lt;p&gt;如果只需要基本的读取/写入操作，那么其中的&lt;code&gt;read.xlsx()&lt;/code&gt;和&lt;code&gt;write.xlsx()&lt;/code&gt;应该就能满足大部分的需求了，其用法也很简单，看看帮助文档就了解了。此外，还有两个相应的函数&lt;code&gt;read.xlsx2()&lt;/code&gt;和&lt;code&gt;write.xlsx2()&lt;/code&gt;，按作者的话说，这两个函数使用了不同的实现方式，效率上会更高一些。&lt;/p&gt;

&lt;p&gt;除了基本的读写操作之外，如之前所说，xlsx包还能进行格式方面的设置。下面是一个简单的例子，说明了如何创建工作簿和工作表，如何操作单元格等。感兴趣的朋友不妨运行一下下面的例子，看看最终的效果。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ind = read.table(url(&amp;quot;http://yixuan.cos.name/cn/wp-content/uploads/2012/01/ind.txt&amp;quot;),
                 sep = &amp;quot;\t&amp;quot;);

library(xlsx);
# Create a new workbook
wb = createWorkbook();
# Create a new sheet with a name
sheet1 = createSheet(wb, &amp;quot;第一页&amp;quot;);
# Set the zoom ratio when you open the Excel file
setZoom(sheet1, 50, 100);
# Set the width of columns
setColumnWidth(sheet1, 1:100, 2.8);

# Create rows
rows = createRow(sheet1, 1:40);
# Create cells for each row
cells = createCell(rows, 1:73);
# Merge the first row into one cell
addMergedRegion(sheet1, 1, 1, 1, 73);
# Create the style for title cell
title_cell_style = CellStyle(wb,
    alignment = Alignment(horizontal = &amp;quot;ALIGN_CENTER&amp;quot;),
    font = Font(wb, &amp;quot;blue&amp;quot;, 50, isBold = TRUE));
# Create the style for black cells
black_cell_style = CellStyle(wb,
    border = Border(),
    fill = Fill(foregroundColor= &amp;quot;black&amp;quot;));
# Get the first row
first_row = getRows(sheet1, 1);
# Get the title cell from first row
title_cell = getCells(first_row, 1)[[1]];
# Set the value of the title cell
setCellValue(title_cell, &amp;quot;Read/Write Excel!&amp;quot;);
# Set the style of the title cell
setCellStyle(title_cell, title_cell_style);
# Set the style of black cells
tmp = mapply(function(x, y) setCellStyle(cells[[x, y]], black_cell_style),
       ind[, 1] + 3, ind[, 2] + 5);
# Save the workbook into a file
saveWorkbook(wb, &amp;quot;test.xlsx&amp;quot;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;总的来说，xlsx包是我目前见过的功能最全的操作Excel的R包，它只依赖于Java环境和rJava、xlsxjars两个包，在多种平台下都能运行，局限是写操作只支持Excel 2007格式（&lt;em&gt;.xlsx），对于机器上只有MS Office 2003的人来说可能会有些不便。（LibreOffice和OpenOffice.org都可以打开Excel 2007文件）&lt;/em&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Jekyll Introduction</title>
   <link href="http://yixuan.github.com/2011/12/jekyll-introduction"/>
   <updated>2011-12-29T00:00:00+08:00</updated>
   <id>hhttp://yixuan.github.com/2011/12/jekyll-introduction</id>
   <content type="html">&lt;p&gt;This Jekyll introduction will outline specifically what Jekyll is and why you would want to use it. Directly following the intro we&amp;#8217;ll learn exactly &lt;em&gt;how&lt;/em&gt; Jekyll does what it does.&lt;/p&gt;

&lt;h2 id='overview'&gt;Overview&lt;/h2&gt;

&lt;h3 id='what_is_jekyll'&gt;What is Jekyll?&lt;/h3&gt;

&lt;p&gt;Jekyll is a parsing engine bundled as a ruby gem used to build static websites from dynamic components such as templates, partials, liquid code, markdown, etc. Jekyll is known as &amp;#8220;a simple, blog aware, static site generator&amp;#8221;.&lt;/p&gt;

&lt;h3 id='examples'&gt;Examples&lt;/h3&gt;

&lt;p&gt;This website is created with Jekyll. &lt;a href='https://github.com/mojombo/jekyll/wiki/Sites'&gt;Other Jekyll websites&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id='what_does_jekyll_do'&gt;What does Jekyll Do?&lt;/h3&gt;

&lt;p&gt;Jekyll is a ruby gem you install on your local system. Once there you can call &lt;code&gt;jekyll --server&lt;/code&gt; on a directory and provided that directory is setup in a way jekyll expects, it will do magic stuff like parse markdown/textile files, compute categories, tags, permalinks, and construct your pages from layout templates and partials.&lt;/p&gt;

&lt;p&gt;Once parsed, Jekyll stores the result in a self-contained static &lt;code&gt;_site&lt;/code&gt; folder. The intention here is that you can serve all contents in this folder statically from a plain static web-server.&lt;/p&gt;

&lt;p&gt;You can think of Jekyll as a normalish dynamic blog but rather than parsing content, templates, and tags on each request, Jekyll does this once &lt;em&gt;beforehand&lt;/em&gt; and caches the &lt;em&gt;entire website&lt;/em&gt; in a folder for serving statically.&lt;/p&gt;

&lt;h3 id='jekyll_is_not_blogging_software'&gt;Jekyll is Not Blogging Software&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Jekyll is a parsing engine.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jekyll does not come with any content nor does it have any templates or design elements. This is a common source of confusion when getting started. Jekyll does not come with anything you actually use or see on your website - you have to make it.&lt;/p&gt;

&lt;h3 id='why_should_i_care'&gt;Why Should I Care?&lt;/h3&gt;

&lt;p&gt;Jekyll is very minimalistic and very efficient. The most important thing to realize about Jekyll is that it creates a static representation of your website requiring only a static web-server. Traditional dynamic blogs like Wordpress require a database and server-side code. Heavily trafficked dynamic blogs must employ a caching layer that ultimately performs the same job Jekyll sets out to do; serve static content.&lt;/p&gt;

&lt;p&gt;Therefore if you like to keep things simple and you prefer the command-line over an admin panel UI then give Jekyll a try.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Developers like Jekyll because we can write content like we write code:&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Ability to write content in markdown or textile in your favorite text-editor.&lt;/li&gt;

&lt;li&gt;Ability to write and preview your content via localhost.&lt;/li&gt;

&lt;li&gt;No internet connection required.&lt;/li&gt;

&lt;li&gt;Ability to publish via git.&lt;/li&gt;

&lt;li&gt;Ability to host your blog on a static web-server.&lt;/li&gt;

&lt;li&gt;Ability to host freely on GitHub Pages.&lt;/li&gt;

&lt;li&gt;No database required.&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id='how_jekyll_works'&gt;How Jekyll Works&lt;/h1&gt;

&lt;p&gt;The following is a complete but concise outline of exactly how Jekyll works.&lt;/p&gt;

&lt;p&gt;Be aware that core concepts are introduced in rapid succession without code examples. This information is not intended to specifically teach you how to do anything, rather it is intended to give you the &lt;em&gt;full picture&lt;/em&gt; relative to what is going on in Jekyll-world.&lt;/p&gt;

&lt;p&gt;Learning these core concepts should help you avoid common frustrations and ultimately help you better understand the code examples contained throughout Jekyll-Bootstrap.&lt;/p&gt;

&lt;h2 id='initial_setup'&gt;Initial Setup&lt;/h2&gt;

&lt;p&gt;After &lt;a href='/index.html#start-now'&gt;installing jekyll&lt;/a&gt; you&amp;#8217;ll need to format your website directory in a way jekyll expects. Jekyll-bootstrap conveniently provides the base directory format.&lt;/p&gt;

&lt;h3 id='the_jekyll_application_base_format'&gt;The Jekyll Application Base Format&lt;/h3&gt;

&lt;p&gt;Jekyll expects your website directory to be laid out like so:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- _config.yml
|-- _includes
|-- _layouts
|   |-- default.html
|   |-- post.html
|-- _posts
|   |-- 20011-10-25-open-source-is-good.markdown
|   |-- 20011-04-26-hello-world.markdown
|-- _site
|-- index.html
|-- assets
    |-- css
        |-- style.css
    |-- javascripts&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_config.yml&lt;/strong&gt;&lt;br /&gt;Stores configuration data.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_includes&lt;/strong&gt;&lt;br /&gt;This folder is for partial views.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_layouts&lt;/strong&gt; &lt;br /&gt;This folder is for the main templates your content will be inserted into. You can have different layouts for different pages or page sections.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_posts&lt;/strong&gt;&lt;br /&gt;This folder contains your dynamic content/posts. the naming format is required to be &lt;code&gt;@YEAR-MONTH-DATE-title.MARKUP@&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;_site&lt;/strong&gt;&lt;br /&gt;This is where the generated site will be placed once Jekyll is done transforming it.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;assets&lt;/strong&gt;&lt;br /&gt;This folder is not part of the standard jekyll structure. The assets folder represents &lt;em&gt;any generic&lt;/em&gt; folder you happen to create in your root directory. Directories and files not properly formatted for jekyll will be left untouched for you to serve normally.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;(read more: &lt;a href='https://github.com/mojombo/jekyll/wiki/Usage'&gt;https://github.com/mojombo/jekyll/wiki/Usage&lt;/a&gt;)&lt;/p&gt;

&lt;h3 id='jekyll_configuration'&gt;Jekyll Configuration&lt;/h3&gt;

&lt;p&gt;Jekyll supports various configuration options that are fully outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Configuration'&gt;https://github.com/mojombo/jekyll/wiki/Configuration&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='content_in_jekyll'&gt;Content in Jekyll&lt;/h2&gt;

&lt;p&gt;Content in Jekyll is either a post or a page. These content &amp;#8220;objects&amp;#8221; get inserted into one or more templates to build the final output for its respective static-page.&lt;/p&gt;

&lt;h3 id='posts_and_pages'&gt;Posts and Pages&lt;/h3&gt;

&lt;p&gt;Both posts and pages should be written in markdown, textile, or HTML and may also contain Liquid templating syntax. Both posts and pages can have meta-data assigned on a per-page basis such as title, url path, as well as arbitrary custom meta-data.&lt;/p&gt;

&lt;h3 id='working_with_posts'&gt;Working With Posts&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Post&lt;/strong&gt; &lt;br /&gt;Posts are created by properly formatting a file and placing it the &lt;code&gt;_posts&lt;/code&gt; folder.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;A post must have a valid filename in the form &lt;code&gt;YEAR-MONTH-DATE-title.MARKUP&lt;/code&gt; and be placed in the &lt;code&gt;_posts&lt;/code&gt; directory. If the data format is invalid Jekyll will not recognize the file as a post. The date and title are automatically parsed from the filename of the post file. Additionally, each file must have &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt; prepended to its content. YAML Front-Matter is a valid YAML syntax specifying meta-data for the given file.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Order&lt;/strong&gt;&lt;br /&gt;Ordering is an important part of Jekyll but it is hard to specify a custom ordering strategy. Only reverse chronological and chronological ordering is supported in Jekyll.&lt;/p&gt;

&lt;p&gt;Since the date is hard-coded into the filename format, to change the order, you must change the dates in the filenames.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Tags&lt;/strong&gt; &lt;br /&gt;Posts can have tags associated with them as part of their meta-data. Tags may be placed on posts by providing them in the post&amp;#8217;s YAML front matter. You have access to the post-specific tags in the templates. These tags also get added to the sitewide collection.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories&lt;/strong&gt; &lt;br /&gt;Posts may be categorized by providing one or more categories in the YAML front matter. Categories offer more significance over tags in that they can be reflected in the URL path to the given post. Note categories in Jekyll work in a specific way. If you define more than one category you are defining a category hierarchy &amp;#8220;set&amp;#8221;. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
title :  Hello World
categories : [lessons, beginner]
---&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This defines the category hierarchy &amp;#8220;lessons/beginner&amp;#8221;. Note this is &lt;em&gt;one category&lt;/em&gt; node in Jekyll. You won&amp;#8217;t find &amp;#8220;lessons&amp;#8221; and &amp;#8220;beginner&amp;#8221; as two separate categories unless you define them elsewhere as singular categories.&lt;/p&gt;

&lt;h3 id='working_with_pages'&gt;Working With Pages&lt;/h3&gt;

&lt;p&gt;&lt;strong&gt;Creating a Page&lt;/strong&gt;&lt;br /&gt;Pages are created by properly formatting a file and placing it anywhere in the root directory or subdirectories that do &lt;em&gt;not&lt;/em&gt; start with an underscore.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;In order to register as a Jekyll page the file must contain &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;YAML Front-Matter&lt;/a&gt;. Registering a page means 1) that Jekyll will process the page and 2) that the page object will be available in the &lt;code&gt;site.pages&lt;/code&gt; array for inclusion into your templates.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Categories and Tags&lt;/strong&gt;&lt;br /&gt;Pages do not compute categories nor tags so defining them will have no effect.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Sub-Directories&lt;/strong&gt;&lt;br /&gt;If pages are defined in sub-directories, the path to the page will be reflected in the url. Example:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.
|-- people
    |-- bob
        |-- essay.html&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This page will be available at &lt;code&gt;http://yourdomain.com/people/bob/essay.html&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Recommended Pages&lt;/strong&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;index.html&lt;/strong&gt;&lt;br /&gt;You will always want to define the root index.html page as this will display on your root URL.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;404.html&lt;/strong&gt;&lt;br /&gt;Create a root 404.html page and GitHub Pages will serve it as your 404 response.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;sitemap.html&lt;/strong&gt;&lt;br /&gt;Generating a sitemap is good practice for SEO.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;about.html&lt;/strong&gt;&lt;br /&gt;A nice about page is easy to do and gives the human perspective to your website.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id='templates_in_jekyll'&gt;Templates in Jekyll&lt;/h2&gt;

&lt;p&gt;Templates are used to contain a page&amp;#8217;s or post&amp;#8217;s content. All templates have access to a global site object variable: &lt;code&gt;site&lt;/code&gt; as well as a page object variable: &lt;code&gt;page&lt;/code&gt;. The site variable holds all accessible content and metadata relative to the site. The page variable holds accessible data for the given page or post being rendered at that point.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Create a Template&lt;/strong&gt;&lt;br /&gt;Templates are created by properly formatting a file and placing it in the &lt;code&gt;_layouts&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Formatting&lt;/strong&gt;&lt;br /&gt;Templates should be coded in HTML and contain YAML Front Matter. All templates can contain Liquid code to work with your site&amp;#8217;s data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Rending Page/Post Content in a Template&lt;/strong&gt;&lt;br /&gt;There is a special variable in all templates named : &lt;code&gt;content&lt;/code&gt;. The &lt;code&gt;content&lt;/code&gt; variable holds the page/post content including any sub-template content previously defined. Render the content variable wherever you want your main content to be injected into your template:&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;...
&amp;lt;body&amp;gt;
  &amp;lt;div id=&quot;sidebar&quot;&amp;gt; ... &amp;lt;/div&amp;gt;
  &amp;lt;div id=&quot;main&quot;&amp;gt;
    &amp;#123;{content}&amp;#125;
  &amp;lt;/div&amp;gt;
&amp;lt;/body&amp;gt;
...&lt;/code&gt;&lt;/pre&gt;
&lt;h3 id='subtemplates'&gt;Sub-Templates&lt;/h3&gt;

&lt;p&gt;Sub-templates are exactly templates with the only difference being they define another &amp;#8220;root&amp;#8221; layout/template within their YAML Front Matter. This essentially means a template will render inside of another template.&lt;/p&gt;

&lt;h3 id='includes'&gt;Includes&lt;/h3&gt;

&lt;p&gt;In Jekyll you can define include files by placing them in the &lt;code&gt;_includes&lt;/code&gt; folder. Includes are NOT templates, rather they are just code snippets that get included into templates. In this way, you can treat the code inside includes as if it was native to the parent template.&lt;/p&gt;

&lt;p&gt;Any valid template code may be used in includes.&lt;/p&gt;

&lt;h2 id='using_liquid_for_templating'&gt;Using Liquid for Templating&lt;/h2&gt;

&lt;p&gt;Templating is perhaps the most confusing and frustrating part of Jekyll. This is mainly due to the fact that Jekyll templates must use the Liquid Templating Language.&lt;/p&gt;

&lt;h3 id='what_is_liquid'&gt;What is Liquid?&lt;/h3&gt;

&lt;p&gt;&lt;a href='https://github.com/Shopify/liquid'&gt;Liquid&lt;/a&gt; is a secure templating language developed by &lt;a href='http://shopify.com'&gt;Shopify&lt;/a&gt;. Liquid is designed for end-users to be able to execute logic within template files without imposing any security risk on the hosting server.&lt;/p&gt;

&lt;p&gt;Jekyll uses Liquid to generate the post content within the final page layout structure and as the primary interface for working with your site and post/page data.&lt;/p&gt;

&lt;h3 id='why_do_we_have_to_use_liquid'&gt;Why Do We Have to Use Liquid?&lt;/h3&gt;

&lt;p&gt;GitHub uses Jekyll to power &lt;a href='http://pages.github.com/'&gt;GitHub Pages&lt;/a&gt;. GitHub cannot afford to run arbitrary code on their servers so they lock developers down via Liquid.&lt;/p&gt;

&lt;h3 id='liquid_is_not_programmerfriendly'&gt;Liquid is Not Programmer-Friendly.&lt;/h3&gt;

&lt;p&gt;The short story is liquid is not real code and its not intended to execute real code. The point being you can&amp;#8217;t do jackshit in liquid that hasn&amp;#8217;t been allowed explicitly by the implementation. What&amp;#8217;s more you can only access data-structures that have been explicitly passed to the template.&lt;/p&gt;

&lt;p&gt;In Jekyll&amp;#8217;s case it is not possible to alter what is passed to Liquid without hacking the gem or running custom plugins. Both of which cannot be supported by GitHub Pages.&lt;/p&gt;

&lt;p&gt;As a programmer - this is very frustrating.&lt;/p&gt;

&lt;p&gt;But rather than look a gift horse in the mouth we are going to suck it up and view it as an opportunity to work around limitations and adopt client-side solutions when possible.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Aside&lt;/strong&gt; &lt;br /&gt;My personal stance is to not invest time trying to hack liquid. It&amp;#8217;s really unnecessary &lt;em&gt;from a programmer&amp;#8217;s&lt;/em&gt; perspective. That is to say if you have the ability to run custom plugins (i.e. run arbitrary ruby code) you are better off sticking with ruby. Toward that end I&amp;#8217;ve built &lt;a href='http://github.com/plusjade/mustache-with-jekyll'&gt;Mustache-with-Jekyll&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='static_assets'&gt;Static Assets&lt;/h2&gt;

&lt;p&gt;Static assets are any file in the root or non-underscored subfolders that are not pages. That is they have no valid YAML Front Matter and are thus not treated as Jekyll Pages.&lt;/p&gt;

&lt;p&gt;Static assets should be used for images, css, and javascript files.&lt;/p&gt;

&lt;h2 id='how_jekyll_parses_files'&gt;How Jekyll Parses Files&lt;/h2&gt;

&lt;p&gt;Remember Jekyll is a processing engine. There are two main types of parsing in Jekyll.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Content parsing.&lt;/strong&gt; &lt;br /&gt;This is done with textile or markdown.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template parsing.&lt;/strong&gt; &lt;br /&gt;This is done with the liquid templating language.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And thus there are two main types of file formats needed for this parsing.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Post and Page files.&lt;/strong&gt;&lt;br /&gt;All content in Jekyll is either a post or a page so valid posts and pages are parsed with markdown or textile.&lt;/li&gt;

&lt;li&gt;&lt;strong&gt;Template files.&lt;/strong&gt; &lt;br /&gt;These files go in &lt;code&gt;_layouts&lt;/code&gt; folder and contain your blogs &lt;strong&gt;templates&lt;/strong&gt;. They should be made in HTML with the help of Liquid syntax. Since include files are simply injected into templates they are essentially parsed as if they were native to the template.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Arbitrary files and folders.&lt;/strong&gt; &lt;br /&gt;Files that &lt;em&gt;are not&lt;/em&gt; valid pages are treated as static content and pass through Jekyll untouched and reside on your blog in the exact structure and format they originally existed in.&lt;/p&gt;

&lt;h3 id='formatting_files_for_parsing'&gt;Formatting Files for Parsing.&lt;/h3&gt;

&lt;p&gt;We&amp;#8217;ve outlined the need for valid formatting using &lt;strong&gt;YAML Front Matter&lt;/strong&gt;. Templates, posts, and pages all need to provide valid YAML Front Matter even if the Matter is empty. This is the only way Jekyll knows you want the file processed.&lt;/p&gt;

&lt;p&gt;YAML Front Matter must be prepended to the top of template/post/page files:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;---
layout: post
category : pages
tags : [how-to, jekyll]
---

... contents ...&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Three hyphens on a new line start the Front-Matter block and three hyphens on a new line end the block. The data inside the block must be valid YAML.&lt;/p&gt;

&lt;p&gt;Configuration parameters for YAML Front-Matter is outlined here: &lt;a href='https://github.com/mojombo/jekyll/wiki/YAML-Front-Matter'&gt;A comprehensive explanation of YAML Front Matter&lt;/a&gt;&lt;/p&gt;

&lt;h4 id='defining_layouts_for_posts_and_templates_parsing'&gt;Defining Layouts for Posts and Templates Parsing.&lt;/h4&gt;

&lt;p&gt;The &lt;code&gt;layout&lt;/code&gt; parameter in the YAML Front Matter defines the template file for which the given post or template should be injected into. If a template file specifies its own layout, it is effectively being used as a &lt;code&gt;sub-template.&lt;/code&gt; That is to say loading a post file into a template file that refers to another template file with work in the way you&amp;#8217;d expect; as a nested sub-template.&lt;/p&gt;

&lt;h2 id='how_jekyll_generates_the_final_static_files'&gt;How Jekyll Generates the Final Static Files.&lt;/h2&gt;

&lt;p&gt;Ultimately, Jekyll&amp;#8217;s job is to generate a static representation of your website. The following is an outline of how that&amp;#8217;s done:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll collects data.&lt;/strong&gt; &lt;br /&gt;Jekyll scans the posts directory and collects all posts files as post objects. It then scans the layout assets and collects those and finally scans other directories in search of pages.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll computes data.&lt;/strong&gt; &lt;br /&gt;Jekyll takes these objects, computes metadata (permalinks, tags, categories, titles, dates) from them and constructs one big &lt;code&gt;site&lt;/code&gt; object that holds all the posts, pages, layouts, and respective metadata. At this stage your site is one big computed ruby object.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll liquifies posts and templates.&lt;/strong&gt;&lt;br /&gt;Next jekyll loops through each post file and converts (through markdown or textile) and &lt;strong&gt;liquifies&lt;/strong&gt; the post inside of its respective layout(s). Once the post is parsed and liquified inside the the proper layout structure, the layout itself is &amp;#8220;liquified&amp;#8221;. &lt;br /&gt;&lt;strong&gt;Liquification&lt;/strong&gt; is defined as follows: Jekyll initiates a Liquid template, and passes a simpler hash representation of the ruby site object as well as a simpler hash representation of the ruby post object. These simplified data structures are what you have access to in the templates.&lt;/p&gt;
&lt;/li&gt;

&lt;li&gt;
&lt;p&gt;&lt;strong&gt;Jekyll generates output.&lt;/strong&gt; &lt;br /&gt;Finally the liquid templates are &amp;#8220;rendered&amp;#8221;, thereby processing any liquid syntax provided in the templates and saving the final, static representation of the file.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;Notes.&lt;/strong&gt;&lt;br /&gt;Because Jekyll computes the entire site in one fell swoop, each template is given access to a global &lt;code&gt;site&lt;/code&gt; hash that contains useful data. It is this data that you&amp;#8217;ll iterate through and format using the Liquid tags and filters in order to render it onto a given page.&lt;/p&gt;

&lt;p&gt;Remember, in Jekyll you are an end-user. Your API has only two components:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The manner in which you setup your directory.&lt;/li&gt;

&lt;li&gt;The liquid syntax and variables passed into the liquid templates.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;All the data objects available to you in the templates via Liquid are outlined in the &lt;strong&gt;API Section&lt;/strong&gt; of Jekyll-Bootstrap. You can also read the original documentation here: &lt;a href='https://github.com/mojombo/jekyll/wiki/Template-Data'&gt;https://github.com/mojombo/jekyll/wiki/Template-Data&lt;/a&gt;&lt;/p&gt;

&lt;h2 id='conclusion'&gt;Conclusion&lt;/h2&gt;

&lt;p&gt;I hope this paints a clearer picture of what Jekyll is doing and why it works the way it does. As noted, our main programming constraint is the fact that our API is limited to what is accessible via Liquid and Liquid only.&lt;/p&gt;

&lt;p&gt;Jekyll-bootstrap is intended to provide helper methods and strategies aimed at making it more intuitive and easier to work with Jekyll =)&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Thank you&lt;/strong&gt; for reading this far.&lt;/p&gt;

&lt;h2 id='next_steps'&gt;Next Steps&lt;/h2&gt;

&lt;p&gt;Please take a look at &lt;a href='' /&gt; or jump right into &lt;a href=''&gt;Usage&lt;/a&gt; if you&amp;#8217;d like.&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>手写识别，50行R代码</title>
   <link href="http://yixuan.github.com/2011/12/handwriting-recognition-with-50-lines-r-code"/>
   <updated>2011-12-16T23:33:39+08:00</updated>
   <id>hhttp://yixuan.github.com/2011/12/handwriting-recognition-with-50-lines-r-code</id>
   <content type="html">&lt;p&gt;标题当然是唬人的，不过代码真的是50行正好（不算注释和空行啊），可以玩简单的数字识别。玩法很简单，先把附加的RData文件加载到R空间中（就是&lt;code&gt;load(&amp;quot;train.RData&amp;quot;)&lt;/code&gt;这句），然后调用函数&lt;code&gt;guess()&lt;/code&gt;，会打开一个空白的图形窗口。按住鼠标左键画一个0到9范围内的数字，然后右击鼠标确认，R会把猜测的结果输出出来。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(grid);
getData = function()
{
    pushViewport(viewport());
    grid.rect();
    px = NULL;
    py = NULL;
    mousedown = function(buttons, x, y)
    {
        if(buttons == 2) return(invisible(1));
        eventEnv$onMouseMove = mousemove;
        NULL
    }
    mousemove = function(buttons, x, y)
    {
        px &amp;lt;&amp;lt;- c(px, x);
        py &amp;lt;&amp;lt;- c(py, y);
        grid.points(x, y);
        NULL
    }
    mouseup = function(buttons, x, y) {    
        eventEnv$onMouseMove = NULL;
        NULL
    }
    setGraphicsEventHandlers(onMouseDown = mousedown,
                             onMouseUp = mouseup);
    eventEnv = getGraphicsEventEnv();
    cat(&amp;quot;Click down left mouse button and drag to draw the number,
		right click to finish.\n&amp;quot;);
    getGraphicsEvent();
    dev.off();
    s = seq(0, 1, length.out = length(px));
    spx = spline(s, px, n = 500)$y;
    spy = spline(s, py, n = 500)$y;
    return(cbind(spx, spy));
}

traceCorr = function(dat1, dat2)
{
    cor(dat1[, 1], dat2[, 1]) + cor(dat1[, 2], dat2[, 2]);
}

# recogTrain = list();
# for(i in 1:10)
# {
#     recogTrain[[i]] = getData();
# }
# save(recogTrain, file = &amp;quot;train.RData&amp;quot;);

load(&amp;quot;train.RData&amp;quot;);
guess = function(verbose = FALSE)
{
    test = getData();
    coefs = sapply(recogTrain, traceCorr, dat2 = test);
    num = which.max(coefs);
    if(num == 10) num = 0;
    if(verbose) print(coefs);
    cat(&amp;quot;I guess what you have input is &amp;quot;, num, &amp;quot;.\n&amp;quot;, sep = &amp;quot;&amp;quot;);
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;有玩成功了的同志在评论里吼一嗓子啊（貌似4很难识别对），谢谢。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;notice type=download&lt;/span&gt;下载：&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2011/12/HandwritingRecognition.zip'&gt;train.RData&lt;/a&gt;&lt;span&gt;/notice&lt;/span&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>一些澄清，致歉，和广告</title>
   <link href="http://yixuan.github.com/2011/12/some-notices"/>
   <updated>2011-12-01T14:32:42+08:00</updated>
   <id>hhttp://yixuan.github.com/2011/12/some-notices</id>
   <content type="html">&lt;p&gt;事情的源起是果壳的这个帖子：&lt;a href='http://www.guokr.com/post/74433'&gt;http://www.guokr.com/post/74433&lt;/a&gt;。帖子中转载了我之前写的一篇博客，主要内容是对宋词进行了一些词频的统计，然后各位网友纷纷发挥了自己的创造力，利用这些高频词语来“写词”。看到大家热情这么高我当然非常高兴，因为这至少说明我做的一些东西是有意义的。我学的专业是统计和精算，平时会和各种类型的数据打交道，之前写那篇博文也是出于兴趣，想利用学到的专业知识来对一些实际的问题进行分析。&lt;/p&gt;

&lt;p&gt;而我没有意料到的是大家对这件事的关注度会这么高，以至于果壳网把那篇帖子推到了首页，甚至还有一些朋友说希望能有进一步的采访等等，这都是我始料未及的。对此我觉得有必要对其中的一些细节进行解释，以避免不必要的误会。&lt;/p&gt;

&lt;p&gt;首先，很多人肯定都会提到“自动作词机”，就比如拿生日、QQ、物理常数等套用里面的排序来“写词”。但我想说的是，这其实不是我的创意，也不是我写那篇博文的初衷。如果大家看过果壳的那篇帖子，就会发现大家开始“狂欢”是因为39楼“达芬奇的鸡蛋”的创意，而词频统计本身并没有任何特殊之处。事实上，大家可能听说过“文本挖掘”这个名词，它就是对文本数据进行分析，来得到有用的结论。文本挖掘是个很复杂的过程，牵涉到分词、词频统计、特征选择、聚类等等，如果大家对这一块内容有所了解的话，就会知道词频统计是一个很平凡的过程。&lt;/p&gt;

&lt;p&gt;关于自动作词机，这其实也是一个很早就有的概念，甚至网上流传，刘慈欣老师在90年代就编写过类似的软件。而就宋词来说，也有相应的文章进行过讨论，比如《一种宋词自动生成的遗传算法及其机器实现》，感兴趣的朋友可以到&lt;a href='http://wenku.baidu.com/view/bf7c8a00b52acfc789ebc9be.html'&gt;http://wenku.baidu.com/view/bf7c8a00b52acfc789ebc9be.html&lt;/a&gt;进行浏览。&lt;/p&gt;

&lt;p&gt;第二个大家可能觉得比较新鲜的地方是利用理科的知识来研究文学的内容。我需要说的是，这个其实也很常见，而且可以追溯到更久以前，一个典型的例子是李贤平老师的《&amp;lt;红楼梦&amp;gt;成书新说》，浏览的地址是&lt;a href='http://www.docin.com/p-277121750.html'&gt;http://www.docin.com/p-277121750.html&lt;/a&gt;。事实上，有很多学者都尝试过对《红楼梦》的词频进行分析，以试图找出前八十回和后四十回的差异。&lt;/p&gt;

&lt;p&gt;第三点我需要说的是，可能有些朋友觉得我得到宋词的词频是一件技术含量很高的活儿，但从技术层面上来讲，我做的那些东西也并无任何高级之处（当然需要有一些编程经验）。我个人对R语言比较感兴趣，所以这些分析都是用R语言实现的。但对于其它的编程语言或统计软件，要实现的话都是有章可循的。果壳的帖子中25楼的朋友就给出了一个很好的解决方案。事实上，目前已经有不少专门进行文本挖掘的软件，比如R语言的rmmseg4j软件包等，如果有对技术感兴趣的朋友，可以参考这个帖子：&lt;a href='http://cos.name/cn/topic/105321'&gt;http://cos.name/cn/topic/105321&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;所以上面说的这些东西中心思想是什么呢？意思就是说，无论是想法、研究还是技术，其实很早以前就有人做过了，太阳底下并无新鲜事，大家需要知道这背后的一些事实。&lt;/p&gt;

&lt;p&gt;然后是标题的第二部分。今天有一些朋友发邮件或是给我博客留言，说希望能有一些采访，我把我的想法一并在这里说了吧。首先，真的非常感谢几位对这个话题的关注以及对我的肯定，我自己非常感激。但非常遗憾，我想我还不能接受。一方面是我之前说的，有几位朋友觉得是我弄出的自动写诗机，但实际上不是的，而且我自己也没有打算往这一方向去做。另一方面就是最近我的学业压力比较大，没有太多的精力投入在这些事情上。我这个博客的目的，是记录自己学习的过程，同时如果可能的话，希望我做的东西能引起大家对统计学和R语言的兴趣。至于其他的方面，可能并不是我考虑的初衷。&lt;/p&gt;

&lt;p&gt;如果还有朋友仍然对这一话题有兴趣，那么请看下面的广告。&lt;/p&gt;

&lt;p&gt;好了，我不想把这篇博文弄得和紧张兮兮的新闻发布会一样，而且我也还远没到那个层次。请大家抬头看一下我博客的域名：cos.name，这个域名是属于&lt;a href='http://cos.name'&gt;统计之都网站&lt;/a&gt;的。统计之都（Capital of Statistics）是一个由志愿者团队维护的非赢利网站，旨在推进国内统计学的发展和应用。我目前是统计之都的管理员之一，而在这个团队中还有很多厉害的牛人，比如网站的创始人&lt;a href='http://yihui.name/cn'&gt;谢益辉大师兄&lt;/a&gt;。更多的成员可以在网站的&lt;a href='http://cos.name/about'&gt;关于页面&lt;/a&gt;中找到，他们中的每一个都有自己擅长的领域，都是很棒的人。&lt;/p&gt;

&lt;p&gt;之前大家普遍转载的是我个人博客中的&lt;a href='http://yixuan.cos.name/cn/2011/03/text-mining-of-song-poems/'&gt;《东风何处是人间》&lt;/a&gt;，但我其实对数据和结果都进行了一些修订，发在了统计之都网站上，文章的标题是&lt;a href='http://cos.name/2011/03/statistics-in-chinese-song-poem-1/'&gt;《统计词话（一）》&lt;/a&gt;。在果壳的帖子里面有朋友对《全唐诗》的词频也感兴趣，而这部分也已经&lt;a href='http://yixf.name/2011/03/21/%E5%B1%B1%E4%BA%BA%E4%BD%95%E5%A4%84%E5%90%9B%E4%B8%8D%E8%A7%81%EF%BC%9F%E4%B8%9C%E9%A3%8E%E4%B8%80%E8%8A%B1%E5%80%9A%E9%98%91%E5%B9%B2%EF%BC%81-%E2%80%94%E2%80%94%E3%80%8A%E5%85%A8%E5%94%90%E8%AF%97/'&gt;有网友做过了&lt;/a&gt;，就在&lt;a href='http://cos.name/2011/03/statistics-in-chinese-song-poem-1/'&gt;《统计词话（一）》&lt;/a&gt;的评论中，那位网友的博客地址是&lt;a href='http://yixf.name'&gt;http://yixf.name&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;统计之都中还有更多有意思的文章，比如&lt;a href='http://cos.name/2011/07/we-never-know-randomness/'&gt;对上帝他老人家的一些思考&lt;/a&gt;，以及&lt;a href='http://cos.name/2011/04/exploring-renren-social-network/'&gt;yinyin网的社会网络分析&lt;/a&gt;等。《统计词话》在计划中还会有续篇，我会把我一些新的想法继续发在网站上。&lt;/p&gt;

&lt;p&gt;总而言之，我相信真正有生命力也最值得关注的是统计学本身，而不仅仅是统计词频或者作诗这一个小的方面。&lt;/p&gt;

&lt;p&gt;嗯，就这么多，最后还是要谢谢大家！&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>近日见闻</title>
   <link href="http://yixuan.github.com/2011/11/recent-life"/>
   <updated>2011-11-15T10:13:58+08:00</updated>
   <id>hhttp://yixuan.github.com/2011/11/recent-life</id>
   <content type="html">&lt;p&gt;最近这个月是在各种奔波忙碌中度过的。各种考试，报告，赶场，一度有抓狂的感觉。不过好在都熬过来了，现在面临的是新的战斗。至于这段时间到底值还是不值，或许只有以后才清楚。&lt;/p&gt;

&lt;p&gt;上周五给数据挖掘小组做了关于大型计算的报告，讲了讲R调用数据库、R对象缓存和并行计算等方面的内容。讲完之后发现自己演讲的能力还是有待提高。充分的准备是一方面，与观众的互动是一方面，总体来说还是要提高自身的素质。&lt;/p&gt;

&lt;p&gt;周六和云熹踏上前往上海的高铁，300km/h，音速的四分之一，一时间恍如隔梦。路上看掉半本《追风筝的人》，脑中一片眩晕，我果然还是对苦难的描写没有抵抗力。到宾馆时已经快九点，开始为第二天的报告抱佛脚。之后见到涛涛、丽云、一硕、龙哥、舰哥，一群人挤在房间里，很有家的感觉。&lt;/p&gt;

&lt;p&gt;第二天的报告，见识了中国最年轻的博导，不禁感慨人和人之间还是有差距的。当然在师姐的气场下，周老师和“老牟”都成了师姐的信徒——这当然是玩笑话。轮到我们讲时，已经快到12点，好在整体比较紧凑，没有背负太多的罪名。到了下午，会议全部结束时，所有人都松了口气，在此必须要对会务组表示由衷的感谢。因为自己经历过，所以清楚办会的辛苦。之前见到丽云时，我们都说她脸色不太好，想是好几天没有好好休息了吧。而翔兄舰兄作为历届的主席，个中辛苦也只有他们自己清楚。&lt;/p&gt;

&lt;p&gt;晚上李舰师兄和林祯舜师兄请我们去酒吧喝酒聊天，露天的座椅，微凉的夜色，酒醉微醺，谈笑风生。每每听及师兄回忆人大的旧事，心中便是一阵神往，这感觉之前也曾有过，那是在读益辉05年的博客。&lt;/p&gt;

&lt;p&gt;第二日早上睡得昏昏沉沉，却也到了再见的时分。太云说搞不好我和涛涛十年之后才能再见，我骂他这不咒我们吗。不过真的到了告别的那一刻，才发现一种失落感涌上心头。我跟师姐说，我现在特别怕听到“以后还有机会再见”之类的话，因为我知道很多机会都是在还有机会中消失的。这两天身心俱疲，以至于整日板着张脸，我也不想这样，所以只能在这里跟各位赔个不是了。有时并非不想接受朋友的好意，实是无福消受太多。&lt;/p&gt;

&lt;p&gt;大家来来往往，聚聚散散，本也是常态了。不过掐指数来，范兄半年没见了，益辉菁菁一年半，小楠两年。真心希望明年我也离开之时，大家又能齐聚一堂，指点江山。&lt;/p&gt;

&lt;p&gt;相逢的人会再相逢。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>rationalfun</title>
   <link href="http://yixuan.github.com/2011/10/rationalfun"/>
   <updated>2011-10-31T21:53:26+08:00</updated>
   <id>hhttp://yixuan.github.com/2011/10/rationalfun</id>
   <content type="html">&lt;p&gt;刚刚向CRAN提交了一个新包，名字叫&lt;code&gt;rationalfun&lt;/code&gt;。这个包顾名思义，是处理有理函数的。毕业论文里面有一块内容是要求有理函数的积分，数学分析课本中给出的方法是部分分式，但这个在程序中不好实现；而如果用数值积分，则速度又太慢，不划算。后来费尽千辛万苦（这里是夸张的修辞手法），终于在一篇计算机的论文中找到了解决的办法，于是索性把算法写成了包，也就是&lt;code&gt;rationalfun&lt;/code&gt;。本来想把论文放到博客上的，&lt;a href='http://www.fanren8.com/read.php?tid=31536'&gt;但听说要坐牢&lt;/a&gt;，心想还是算了。论文的信息是&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;T. N. Subramaniam, and Donald E. G. Malm, How to Integrate Rational Functions, &lt;em&gt;The American Mathematical Monthly&lt;/em&gt;, Vol. 99, No.8 (1992), 762-772.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;目前这个包还很小很天真，能进行的运算无非是加减乘除乘方导数和积分，下面的代码差不多概括了主要的用法：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; r1 = rationalfun(c(1, 1), c(1, rep(0, 8), 1));
&amp;gt; r1;
 1 + x
-------
1 + x^9
&amp;gt; simplify(r1);
                       1
-----------------------------------------------
1 - x + x^2 - x^3 + x^4 - x^5 + x^6 - x^7 + x^8
&amp;gt; r2 = rationalfun(c(1, 1), c(1, rep(0, 6), 1));
&amp;gt; r3 = rationalfun(c(0, 1), c(1, rep(0, 6), 1));
&amp;gt; r4 = r2 - r3;
&amp;gt; r4
   1
-------
1 + x^7
&amp;gt; r4^2
       1
----------------
1 + 2*x^7 + x^14
&amp;gt; deriv(r4)
     -7*x^6
----------------
1 + 2*x^7 + x^14
&amp;gt; integral(r4)
0.142857142857143 * log(abs(x + 1)) + 0.0890699716941046 * log(x^2 +
    1.24697960371747 * x + 1) + 0.223380423562293 * atan((x +
    0.623489801858734)/0.78183148246803) - 0.031788704850902 *
    log(x^2 - 0.445041867912629 * x + 1) + 0.27855083205195 *
    atan((x - 0.222520933956314)/0.974927912181824) - 0.128709838271774 *
    log(x^2 - 1.80193773580484 * x + 1) + 0.123966782605016 *
    atan((x - 0.90096886790242)/0.433883739117558) + 0&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;是不是有一种在进行符号运算的错觉？&lt;/p&gt;

&lt;p&gt;另：读牛人写的包总能发现令人震惊的东西，&lt;code&gt;rationalfun&lt;/code&gt;里面很多代码都是依赖或改编自&lt;code&gt;polynom&lt;/code&gt;包的，里面发现了这样一个函数：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;as.function.polynomial &amp;lt;-
function(x, ...)
{
    a &amp;lt;- rev(coef(x))
    w &amp;lt;- as.name(&amp;quot;w&amp;quot;)
    v &amp;lt;- as.name(&amp;quot;x&amp;quot;)
    ex &amp;lt;- call(&amp;quot;{&amp;quot;, call(&amp;quot;&amp;lt;-&amp;quot;, w, 0))
    for(i in seq_along(a)) {
        ex[[i + 2]] &amp;lt;- call(&amp;quot;&amp;lt;-&amp;quot;, w, call(&amp;quot;+&amp;quot;, a[1], call(&amp;quot;*&amp;quot;, v, w)))
        a &amp;lt;- a[-1]
    }
    ex[[length(ex) + 1]] &amp;lt;- w
    f &amp;lt;- function(x) NULL
    body(f) &amp;lt;- ex
    f
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这个函数的作用就是用一个系数向量来生成一个多项式函数，里面&lt;code&gt;as.name()&lt;/code&gt;，&lt;code&gt;call()&lt;/code&gt;，&lt;code&gt;body()&lt;/code&gt;之类的黑魔法用得不亦乐乎……&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>烧香</title>
   <link href="http://yixuan.github.com/2011/10/bless"/>
   <updated>2011-10-18T15:43:20+08:00</updated>
   <id>hhttp://yixuan.github.com/2011/10/bless</id>
   <content type="html">&lt;p&gt;这次考试得过啊……&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2011/10/Panda.gif'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2011/10/Panda.gif' /&gt;&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>当时只道是寻常</title>
   <link href="http://yixuan.github.com/2011/10/commemorate"/>
   <updated>2011-10-16T22:21:38+08:00</updated>
   <id>hhttp://yixuan.github.com/2011/10/commemorate</id>
   <content type="html">&lt;p&gt;纪念那些无忧的岁月。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2011/10/Rongruo.jpg'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2011/10/Rongruo.jpg' /&gt;&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>My English site</title>
   <link href="http://yixuan.github.com/2011/10/my-english-site"/>
   <updated>2011-10-02T19:54:52+08:00</updated>
   <id>hhttp://yixuan.github.com/2011/10/my-english-site</id>
   <content type="html">&lt;p&gt;Well, just to save my terrible English, I have to find a place to practice writing that way. Please visit my English site &lt;a href='http://yixuan.cos.name/en'&gt;http://yixuan.cos.name/en&lt;/a&gt;, another place where I share my ideas and thoughts.&lt;/p&gt;

&lt;p&gt;Welcome you all!&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>新的开始</title>
   <link href="http://yixuan.github.com/2011/09/a-new-start"/>
   <updated>2011-09-19T08:54:54+08:00</updated>
   <id>hhttp://yixuan.github.com/2011/09/a-new-start</id>
   <content type="html">&lt;p&gt;前两天收到雅虎邮箱的一封邮件，大意是说，嘿，老伙计，你已经用我们邮件9年了，怎么还在用9年前的界面呢，我们给你换个新的吧。于是一时手滑，看了看新的主题，结果发现没法切换回老的界面了。有时候过去的事就像这样，不经意间就找不回来了。&lt;/p&gt;

&lt;p&gt;换就换吧，干脆来得更彻底些，于是把博客的模版也一并更换了一个。不过怎么说呢，现在的这个模版还是多多少少有些怀旧的意味在里面的。:-)&lt;/p&gt;

&lt;p&gt;这会是一个新的开始吗？&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>中秋献礼——Layer图形设备</title>
   <link href="http://yixuan.github.com/2011/09/layer-graphics-device"/>
   <updated>2011-09-12T21:46:22+08:00</updated>
   <id>hhttp://yixuan.github.com/2011/09/layer-graphics-device</id>
   <content type="html">&lt;p&gt;你在用R画图的时候，是否会遇到以下的麻烦：&lt;/p&gt;

&lt;p&gt;* 加图例或文字时总是对不准坐标，要花很多精力调整元素的位置；&lt;/p&gt;

&lt;p&gt;* 某个细节出错，整幅图得重新绘制；&lt;/p&gt;

&lt;p&gt;* 想要更酷的平移、拉伸、旋转操作，就好像在Gimp或Photoshop里面一样；&lt;/p&gt;

&lt;p&gt;* 想更方便地使用字体，特别是中文的显示。&lt;/p&gt;

&lt;p&gt;于是接下来就有一个好消息和一个坏消息。好消息是有一个软件包可以解决上面的大部分问题了，而坏消息是这个包仍然处于开发阶段，所以各种bug是难以避免的。今天恰逢中秋，我便把这个自己编写的Layer软件包介绍给大家，算是送给大家的一份小礼物。&lt;/p&gt;

&lt;p&gt;Layer顾名思义，指的是图层，而这个绘图设备正是采用了图层的思想。在你用Layer画图时，你可以将不同的图形元素放在不同的层上，彼此之间互不影响。例如，你可以将图例单独建立一个图层，当图例移动时，下层的图形并不会发生变化，再加上一定的鼠标操作，就可以方便地绘制出美观的图形。&lt;/p&gt;

&lt;p&gt;为了让大家能直观地感受Layer的操作，下面给出了一段Layer的操作演示视频。&lt;/p&gt;

&lt;p&gt;此外，Layer有着更方便的字体支持。在打开Layer图形设备时，你可以指定一个ttf字体文件作为图形字体的来源，如果参数为&lt;code&gt;NULL&lt;/code&gt;，则图形会使用软件包自带的&lt;a href='http://wenq.org'&gt;文泉驿&lt;/a&gt;微米黑字体。&lt;/p&gt;

&lt;p&gt;Layer软件包的下载地址如下。需要说明的是，Layer需要GTK+环境的支持，对于Windows用户，如果你已经安装了GTK+环境，请选择第二个下载地址；如果尚未安装，可以直接下载第三个文件（软件包中附带了GTK+）。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;notice type=download&lt;/span&gt;(http://yixuan.cos.name/cn/wp-content/uploads/2011/09/Layer_0.1-0.tar.gz)&lt;span&gt;/notice&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;notice type=download&lt;/span&gt;(http://yixuan.cos.name/cn/wp-content/uploads/2011/09/Layer_0.1-0.zip)&lt;span&gt;/notice&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;notice type=download&lt;/span&gt;(http://yixuan.cos.name/cn/wp-content/uploads/2011/09/Layer.zip)&lt;span&gt;/notice&lt;/span&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>扫雷</title>
   <link href="http://yixuan.github.com/2011/08/mine-sweeper"/>
   <updated>2011-08-18T11:25:59+08:00</updated>
   <id>hhttp://yixuan.github.com/2011/08/mine-sweeper</id>
   <content type="html">&lt;p&gt;又是一段时间没更新博客，今天拿刚编的R版扫雷凑个数。跟上一版本相比，主要是改进了用户界面，数字的大小可以根据格子的大小自动调整。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;caption id=&amp;#8221;attachment_564&amp;#8221; align=&amp;#8221;aligncenter&amp;#8221; width=&amp;#8221;538&amp;#8221; caption=&amp;#8221;Ubuntu下的扫雷&amp;#8221;&lt;/span&gt;(http://yixuan.cos.name/cn/wp-content/uploads/2011/08/mine_sweeper_Ubuntu.png)](http://yixuan.cos.name/cn/wp-content/uploads/2011/08/mine_sweeper_Ubuntu.png)&lt;span&gt;/caption&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;caption id=&amp;#8221;attachment_570&amp;#8221; align=&amp;#8221;aligncenter&amp;#8221; width=&amp;#8221;451&amp;#8221; caption=&amp;#8221;Windows下的扫雷&amp;#8221;&lt;/span&gt;(http://yixuan.cos.name/cn/wp-content/uploads/2011/08/mine_sweeper_windows.png)](http://yixuan.cos.name/cn/wp-content/uploads/2011/08/mine_sweeper_windows.png)&lt;span&gt;/caption&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;fun包的源代码在&lt;a href='https://github.com/yihui/fun'&gt;https://github.com/yihui/fun&lt;/a&gt;。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>卷积</title>
   <link href="http://yixuan.github.com/2011/06/convolution"/>
   <updated>2011-06-29T15:17:20+08:00</updated>
   <id>hhttp://yixuan.github.com/2011/06/convolution</id>
   <content type="html">&lt;p&gt;又是三个月没写博客了，或许是因为越来越浮躁了吧，都不知道自己应该做什么了。今天因为论坛上的&lt;a href='http://cos.name/cn/topic/104640'&gt;一个帖子&lt;/a&gt;，偶然想起了前段时间看的有关卷积的一些东西，于是想着在这里整理一下。&lt;/p&gt;

&lt;p&gt;如果学习过概率论的话，应该对卷积不会陌生——求两个独立随机变量之和的密度函数，就是将这两个变量的密度函数进行卷积运算，它实际上就是一个积分。不过今天在这里谈的离散的情形，所以我们来看看下面的这个例子：&lt;/p&gt;

&lt;p&gt;设离散随机变量$$X$$取值为$$0, 1, 2, \ldots, n$$的概率分别为$$p_0,p_1,\ldots,p_n$$，另一个离散随机变量$$Y$$取值为$$0, 1, 2, \ldots, m$$的概率分别为$$q_0,q_1,\ldots,q_m$$，现在要求$$Z=X+Y$$的分布列。&lt;/p&gt;

&lt;p&gt;这个问题并不难，比如说，要使$$Z=0$$，则一定有$$X=0$$且$$Y=0$$，于是$$P(Z=0)=p_0q_0$$。再考虑$$Z=1$$，它分两种情况，$$X=0,Y=1$$和$$X=1,Y=0$$，于是$$P(Z=1)=p_0q_1+p_1q_0$$。类似地，要求$$P(Z=r)$$，就把那些满足$$i+j=r$$的$$p_iq_j$$相加起来即可，例如$$P(Z=4)=p_0q_4+p_1q_3+p_2q_2+p_3q_1+p_4q_0$$。而根据$$X$$和$$Y$$的取值范围，我们知道$$Z$$的可能取值有$$0,1,2,\ldots,n+m$$，不妨假设$$Z$$取这些值的概率分别为$$r_0,r_1,\ldots,r_{n+m}$$，于是有&lt;/p&gt;

&lt;p&gt;$$\displaystyle r_k=\sum_{i+j=k}p_iq_j,\ k=0,1,2,\ldots,n+m$$&lt;/p&gt;

&lt;p&gt;这就是离散情形下的卷积公式，它实际上就是对两个向量$$p=(p_0,p_1,\ldots,p_n)&amp;#8217;,q=(q_0,q_1,\ldots,q_m)&amp;#8217;$$进行运算，来得到第三个向量$$r=(r_0,r_1,\ldots,r_{n+m})&amp;#8217;$$。&lt;/p&gt;

&lt;p&gt;好了，那卷积有什么用呢？在概率和统计中，它最大的用处自然就是求独立随机变量和的分布，但实际上它还有许多有趣的应用。来看下面这个问题：&lt;/p&gt;

&lt;p&gt;假设有两个多项式，$$P(x)=p_nx^n+p_{n-1}x^{n-1}+\cdots+p_1x+p_0$$，$$Q(x)=q_mx^m+q_{m-1}x^{m-1}+\cdots+q_1x+q_0$$，现在想要求$$R(x)=P(x)Q(x)$$的表达式中$$x^k$$的系数。你发现了什么？没错，其结果和之前的卷积表达式是完全一样的。这也就是说，已知了两个多项式的系数向量，这两个多项式乘积的系数向量就是它们的卷积。&lt;/p&gt;

&lt;p&gt;于是开头提到的帖子中的问题就可以解决了。举个例子来说，我们要求1111的平方，首先可以将1111写为$$1\times 10^3+1\times 10^2+1\times 10^1+1\times 10^0$$，然后令$$P(x)=x^3+x^2+x+1$$，则有$$1111=P(10)$$。接下来，计算$$R(x)=P(x)P(x)$$的系数向量，也就是对$$(1, 1, 1, 1)&amp;#8217;$$自身进行卷积，得到的结果是$$(1,2,3,4,3,2,1)&amp;#8217;$$，即$$R(x)=x^6+2x^5+3x^4+4x^3+3x^2+2x+1$$，于是我们可以很自豪地说，$$1111^2=R(10)=10^6+2\times 10^5+\cdots+2\times 10+1$$，那么1111的平方自然就等于多项式的系数向量组成的数字1234321了。&lt;/p&gt;

&lt;p&gt;可是不要高兴得太早，万一出现$$5\times 10^3+16\times 10^2+11\times 10+1$$这种情况怎么办？总不能说是516111吧？也不用急，我们可以从个位数起，依次将数码向高位进位：如果该位的数字小于10，那么就保留这个数，转向更高一位；如果大于10，就将它除以10的余数保留，除以10的商加到更高一位。在这个例子中，个位数等于1，保留；十位上的数除以10余1，商1加到百位；百位17除以10余7，商1加到千位；千位6，保留。因此结果最后就是6711。&lt;/p&gt;

&lt;p&gt;在R中，求卷积的函数是&lt;code&gt;convolve()&lt;/code&gt;，如果要求两个向量&lt;code&gt;pv&lt;/code&gt;和&lt;code&gt;qv&lt;/code&gt;的卷积，用法就是&lt;code&gt;convolve(pv, rev(qv), type = &amp;quot;open&amp;quot;)&lt;/code&gt;。注意函数中的第二个向量一定要反向一下，而且&lt;code&gt;type&lt;/code&gt;参数必须指定为&lt;code&gt;open&lt;/code&gt;。帖子中的问题，程序代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;square = function(n)
{
    if(n == 1) return(1);
    p = rep(1, n);
    v = convolve(p, rev(p), type = &amp;quot;open&amp;quot;);
    v = as.integer(v + 0.5); # 将double转为integer的常见做法
    for(i in length(v):2)
    {
        v[i - 1] = v[i - 1] + v[i] %/% 10;
        v[i] = v[i] %% 10;
    }
    return(v);
}
square(10);&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>Processing JS+Wordpress整合！</title>
   <link href="http://yixuan.github.com/2011/03/processing-js-and-integration-with-wordpress"/>
   <updated>2011-03-21T21:24:35+08:00</updated>
   <id>hhttp://yixuan.github.com/2011/03/processing-js-and-integration-with-wordpress</id>
   <content type="html">&lt;p&gt;Processing有Javascript版本了！虽然这已经是个&lt;a href='http://processingjs.org/'&gt;很老很老的新闻&lt;/a&gt;，但今天突然看到有款&lt;a href='http://www.keyvan.net/code/processing-js/'&gt;Wordpress插件&lt;/a&gt;，可以直接在Wordpress里写Processing程序，于是果断装上试试。下面是一段示例（Processing的JS库比较大，需要等它下载完毕，所以可能得过一段时间才出现）：&lt;/p&gt;

&lt;p&gt;效果与Java版本相比几乎没有区别！&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>东风何处是人间</title>
   <link href="http://yixuan.github.com/2011/03/text-mining-of-song-poems"/>
   <updated>2011-03-02T00:29:37+08:00</updated>
   <id>hhttp://yixuan.github.com/2011/03/text-mining-of-song-poems</id>
   <content type="html">&lt;p&gt;再次神经短路，突然想看看宋词里面什么样的意象是最常见的，比如可以做个频率分析什么的。当然文本挖掘需要分词，我没法在其中花太多时间，于是想出了一个土办法。宋词的句子都很短，如果穷举可能的字的组合的话并不是太多，况且最常见的词语一般是两三个字，这样可能的组合就更少了。比如“犹解嫁东风”这句话，可能的二字组合是“犹解”“解嫁”“嫁东”“东风”，三字组合是“犹解嫁”“解嫁东”“嫁东风”，词的字数越多，可能的组合就越少。如果把每句话可能的字的组合都列举出来，就可以整体统计频率了。&lt;/p&gt;

&lt;p&gt;当然里面会有很多无意义的字的组合，不过这类“词语”本身的出现就是一个偶然，所以可以预期的是它们整体的频数会很低，是入不了“大雅之堂”的。话不多说，直接上代码和结果。&lt;/p&gt;

&lt;p&gt;数据：&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2011/03/Ci.zip'&gt;《全宋词》文本&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;l = scan(&amp;quot;Ci.txt&amp;quot;, &amp;quot;character&amp;quot;, sep = &amp;quot;\n&amp;quot;);
l.len = nchar(l);

# 某些行是作者和标题，所以选取长度大于10的行；
# 另外这个文本文件不太规整，有些网址什么的，
# 所以也要排除那些长度太长的。
ci = l[l.len &amp;gt; 10 &amp;amp; l.len &amp;lt; 500];

# 句子用标点符号分割。
sentences = strsplit(ci, &amp;quot;，|。|！|？|、&amp;quot;);
sentences = unlist(sentences);
sentences = sentences[sentences != &amp;quot;&amp;quot;];
s.len = nchar(sentences);

# 单句太长了说明有可能是错误的字符，去除掉。
sentences = sentences[s.len &amp;lt;= 10];
s.len = nchar(sentences);

# 暴力挨个拆分，比如“犹解嫁东风”的所有二字组合为
# “犹解”“解嫁”“嫁东”“东风”，
# 无意义的词其频数自然就落在后面了。
splitwords = function(x, x.len) substring(x, 1:(x.len - 1), 2:x.len);

words = mapply(splitwords, sentences, s.len, SIMPLIFY = TRUE, USE.NAMES = FALSE);
words = unlist(words);
words.freq = table(words);
words.freq = sort(words.freq, decreasing = TRUE);
data.frame(Word = names(words.freq[1:100]), Freq = as.integer(words.freq[1:100]));&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;结果（排在第一的是无效字符，这跟数据源有关）：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   Word Freq           Word Freq
1       1485        51  天上  368 
2   东风 1382        52  杨柳  362 
3   何处 1230        53  西湖  356 
4   人间 1202        54  桃花  354 
5   风流  857        55  扁舟  353 
6   归去  812        56  消息  351 
7   春风  802        57  憔悴  344 
8   西风  779        58  何事  339 
9   归来  771        59  芙蓉  338 
10  江南  765        60  神仙  334 
11  相思  753        61  一片  334 
12  梅花  732        62  桃李  333 
13  千里  676        63  人生  332 
14  回首  656        64  十分  331 
15  明月  651        65  心事  329 
16  多少  648        66  黄花  328 
17  如今  642        67  一声  325 
18  阑干  630        68  佳人  324 
19  年年  613        69  长安  321 
20  万里  590        70  东君  319 
21  一笑  582        71  断肠  316 
22  黄昏  550        72  而今  315 
23  当年  542        73  鸳鸯  314 
24  天涯  537        74  为谁  313 
25  相逢  528        75  十年  310 
26  芳草  527        76  去年  309 
27  尊前  516        77  少年  308 
28  一枝  512        78  海棠  307 
29  风雨  505        79  寂寞  306 
30  流水  472        80  无情  306 
31  依旧  472        81  不是  305 
32  风吹  471        82  时候  304 
33  风月  461        83  肠断  303 
34  多情  457        84  富贵  303 
35  故人  451        85  蓬莱  303 
36  当时  450        86  昨夜  303 
37  无人  445        87  行人  302 
38  斜阳  438        88  今夜  301 
39  不知  430        89  谁知  300 
40  不见  429        90  不似  299 
41  深处  422        91  江上  298 
42  时节  403        92  悠悠  296 
43  平生  398        93  几度  295 
44  凄凉  398        94  青山  295 
45  春色  394        95  何时  294 
46  匆匆  383        96  天气  293 
47  功名  383        97  惟有  293 
48  一点  378        98  一曲  291 
49  无限  377        99  月明  291 
50  今日  369        100 往事  290&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不知各位看官看到上面这些既熟悉又悠远的话语又将作何感想？或许，她们就是我们千百年来的精神寄托吧。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>向琐碎开战</title>
   <link href="http://yixuan.github.com/2011/02/fire-to-chaos"/>
   <updated>2011-02-28T23:59:39+08:00</updated>
   <id>hhttp://yixuan.github.com/2011/02/fire-to-chaos</id>
   <content type="html">&lt;p&gt;翻翻“过往”才发现，三个月没写博客了。离二月结束还剩20分钟，得抓紧了。&lt;/p&gt;

&lt;p&gt;很多时候，不怕一个巨大的困难摆在你面前，而是怕无数小的麻烦不断蚕食你的时间。在家里安逸地待了一阵子，刚来学校突然就不适应了。貌似周围的许多同志们也出现间歇性不规则情绪低落，同病相怜啊。&lt;/p&gt;

&lt;p&gt;之前一直在找寻克制琐碎的法门，但一直无果，看来这百毒不侵之身不是这么容易练就的啊。不过这几天倒是寻到一条邪道用以克制琐碎，那就是——做更多琐碎的事……&lt;/p&gt;

&lt;p&gt;于是趁着还没到三月份把今天特意制造的一些琐碎罗列如下：&lt;/p&gt;

&lt;p&gt;* 向R core报告了HTML帮助中的一个bug，看看是否会有回应；&lt;/p&gt;

&lt;p&gt;* 成功编译了gotoblas2，而且居然支持多核计算，甚好甚强大（&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2011/02/gotoblas2.zip'&gt;下载&lt;/a&gt;）；&lt;/p&gt;

&lt;p&gt;* 不小心皈依了Emacs教，不过是否虔诚还有待考证；&lt;/p&gt;

&lt;p&gt;* 在预测精度和变量显著性之间纠结了一阵子，然后我笑了；&lt;/p&gt;

&lt;p&gt;* 成功地在23:59之前点了右上角的发布按钮。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>更新一下Rhelper-RGtk2</title>
   <link href="http://yixuan.github.com/2010/11/rhelper-rgtk2-updated"/>
   <updated>2010-11-17T19:53:45+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/11/rhelper-rgtk2-updated</id>
   <content type="html">&lt;p&gt;前两天做了一个稍微有些艰难的决定，把&lt;a href='http://yixuan.cos.name/cn/2010/08/rhelper-rgtk2/'&gt;Rhelper-RGtk2&lt;/a&gt;更新了一下。主要更新的地方有：&lt;/p&gt;

&lt;p&gt;* Rd文档的解析函数全部重写，应该速度比之前的快些；&lt;/p&gt;

&lt;p&gt;* Rd文档格式的支持更加完整，但目前&lt;code&gt;\tabular&lt;/code&gt;标签的排版还是个很麻烦的问题；&lt;/p&gt;

&lt;p&gt;* 新增包选择功能，可以从下拉框中选择软件包，包中的函数会自动列出；&lt;/p&gt;

&lt;p&gt;* 新增过滤器功能，在输入框中键入字符串后按回车，函数列表会根据键入的内容进行匹配，相当于&lt;code&gt;apropos()&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;测试环境是Windows XP 32位及RGtk2 2.20.3版本，其它环境尚未测试过。&lt;/p&gt;

&lt;p&gt;示例：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;library(RGtk2);
Rhelper(&amp;quot;help&amp;quot;);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;截图：&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/11/Rhelper-RGtk2-20101117.png'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/11/Rhelper-RGtk2-20101117-300x235.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;notice type=download&lt;/span&gt;下载：&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/11/Rhelper_RGtk2_20101117_uft8.txt'&gt;Rhelper-RGtk2 2010.11.17更新&lt;/a&gt;（注：必须在UTF-8编码下打开）&lt;span&gt;/notice&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;目前程序还不是特别稳定，暂时仍处于测试状态。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>专业精神</title>
   <link href="http://yixuan.github.com/2010/11/professional-spirit"/>
   <updated>2010-11-06T20:38:04+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/11/professional-spirit</id>
   <content type="html">&lt;p&gt;专业精神，好大的一个题目，准确的定义是什么？我不知道。不过今天遇到的一件小事，不妨拿出来说说。&lt;/p&gt;

&lt;p&gt;现在住的寝室是七个人一个套间，可是楼下信箱的钥匙只有一把。今天没别的事，便准备去配钥匙。便民市场一进门就是一家五金店，开店的是位老太太，我拿钥匙给她，她微微摇了摇头，说这种小钥匙特别难配。十来分钟之后，总共配了六把，我交完钱准备走，老太太把我叫住，说是有问题就再回来找她。&lt;/p&gt;

&lt;p&gt;回到宿舍，我依次试了试，结果都开不了。没办法，只好回头再请老太太看看。到了店里，老太太一听情况也不多说，便拿了把锉刀在钥匙上磨了一阵。一会儿工夫，老太太把磨好的钥匙交给我，让我再试试。&lt;/p&gt;

&lt;p&gt;回来之后我又依次试了一遍，结果非常令人失望，依旧全都打不开。这时候我开始有点怀疑她的技术了，可是也没办法，只好再跑一趟。 第三次走进店里，老太太一听就急了，赶忙又拿锉刀磨了磨，一边问我住哪儿，远不远。我说就住边上，走五分钟就到。她点了点头，跟我说：“带我过去看看吧，我去那儿跟你弄。”我本来不想再继续折腾，配不了也就算了，而且看她年纪也大，走路多少有些不方便，就出言婉拒了。可是她却不同意，坚持要过去看看，一边拿起工具一边说着，“保证给你配好”。 我和她走出门的时候，门边一个修车的师傅半开玩笑半“幸灾乐祸”地冲着老太太说道，“开不了！开不了！”边上一起聊天的几个人也一并附和着。我猜那个修车师傅已经知道，老太太一出门就意味着她配的钥匙打不开锁，要亲自去看看了。而这显然已经不是第一次。&lt;/p&gt;

&lt;p&gt;到了我宿舍楼底下，老太太依次扳动钥匙，然后拿锉刀去磨，不一会儿有三把钥匙已经可以开了，但剩下的三把却一直没有办法。又过了一阵，他突然转向我，笑着说道：“我知道要怎么弄了，你今天找个时间到我那儿去取剩下的三把，我晚上七点才走。”我想着已经有四把钥匙，大家可以共用，就跟她解释说不必麻烦，已经足够了。可她还是那句话：“差一点都不行，我保证给你配好。”&lt;/p&gt;

&lt;p&gt;晚上去吃饭的时候，顺便去老太太那儿取钥匙，她满脸红光地说：“这次保证没有问题了！”。我回来一试，果然都行了。跟之前的几把对比了一下，发现唯一的不同是新的三把在钥匙背上刻了一道很浅的凹痕。&lt;/p&gt;

&lt;p&gt;之前还有一段小插曲。跟她过来的路上，我看她腿脚挺灵活的，便问她多大年纪了，她说今年七十一了。我又问她，是不是一直待在人大，做配钥匙的活儿做了多久了，她微微点头，笑着说：“四十年”。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>小心！</title>
   <link href="http://yixuan.github.com/2010/10/be-careful"/>
   <updated>2010-10-20T18:32:47+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/10/be-careful</id>
   <content type="html">&lt;p&gt;客官请听题：话说有两个随机变量，&lt;span&gt;tex&lt;/span&gt;X\sim N(\mu_1,\sigma_1^2),Y\sim N(\mu_2,\sigma_2^2)&lt;span&gt;/tex&lt;/span&gt;，而且这两个正态随机变量的相关系数是&lt;span&gt;tex&lt;/span&gt;\rho&lt;span&gt;/tex&lt;/span&gt;，问，(X, Y)的联合分布是什么？&lt;/p&gt;

&lt;p&gt;如果你给出的答案是 &lt;span&gt;tex&lt;/span&gt;!\left(\begin{array}{c}X\Y\end{array}\right)\sim N\left(\left(\begin{array}{c}\mu_{1}\\mu_{2}\end{array}\right),\left(\begin{array}{cc}\sigma_{1}^{2}&amp;amp;\rho\sigma_{1}\sigma_{2}\\rho\sigma_{2}\sigma_{1}&amp;amp;\sigma_{2}^{2}\end{array}\right)\right)&lt;span&gt;/tex&lt;/span&gt;，那么请打开你的R，然后运行一下下面的代码：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set.seed(1);
x=rnorm(2000);
y=rnorm(2000);
z=ifelse(x*y&amp;gt;0,x,-x);
shapiro.test(z);
mean(z);
sd(z);
cor(y,z);
hist(z);
x11();
plot(y,z);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;什么？还没缓过神来？请看仔细了，&lt;strong&gt;y和z的符号可是相同的&lt;/strong&gt;！那么这说明什么了呢……&lt;/p&gt;

&lt;p&gt;这是今天复习高等统计学的时候看到书上写的，看完之后突然感觉自己的IQ和EQ都受到了严重的摧残，后果基本上和&lt;a href='http://yixuan.cos.name/cn/2009/10/probability-played-a-trick-on-me/'&gt;这个时候&lt;/a&gt;差不多。难道我每隔一年就要被这样打击一次？&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>吟枫舞墨</title>
   <link href="http://yixuan.github.com/2010/10/maple-singing-ink-waving"/>
   <updated>2010-10-07T21:41:29+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/10/maple-singing-ink-waving</id>
   <content type="html">&lt;p&gt;曾经买过一本英语阅读的小册子，像我买过的所有英语读物一样，看完不到一半，就被我随手搁在了书架上，过着暗无天日的日子。而这本小册子略微有些不同，有时我心情烦闷，便会取下小册子翻一翻，但有些讽刺的是，我所看的不是其中的英文美文，而是书中每一小节前的一段中文小诗。&lt;/p&gt;

&lt;p&gt;书中的第一首诗我印象最深刻，反复吟诵，却也记了下来：&lt;/p&gt;

&lt;p&gt;或许是一盏清亮的灯 或许是竹杖芒鞋醉春风 或许是宝马雕车 载起凌云的心情 红尘猎猎 岁月无边 要打点起所有美景 装饰这段华年 可以水波潋滟 可以大风回旋 只为快乐地走在自己前面 快乐地站在下一个季节前 左手花枝 右手月圆&lt;/p&gt;

&lt;p&gt;秋风拂面，总是引人无数遐想，心中之斑斓，一如枫之翩舞，一如花之馨菲，一如月之皎白。可惜秋来秋往，胜景终究不能长在，惟有指间毫锥，墨色如一。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/10/Moon.jpg'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/10/Moon-225x300.jpg' /&gt;&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Linux下支持自动完成的R编辑器——SciTE</title>
   <link href="http://yixuan.github.com/2010/09/r-script-editor-supporting-autocompletion-in-linux-scite"/>
   <updated>2010-09-19T11:06:01+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/09/r-script-editor-supporting-autocompletion-in-linux-scite</id>
   <content type="html">&lt;p&gt;之前谢老大写了一篇&lt;a href='http://yihui.name/en/2010/08/auto-completion-in-notepad-for-r-script/'&gt;在Notepad++中配置R函数自动完成的文章&lt;/a&gt;，甚好甚强大，不过可惜的是Notepad++只能在Windows下用，没有Linux的版本。当然了，Linux下的编辑器也不少，拿Ubuntu来说，简单的有Gedit，高级的有Kate，神级的有Emacs、Vim等等，但本文介绍的SciTE绝对是一款甚小甚强大的编辑器软件。&lt;/p&gt;

&lt;p&gt;Ubuntu下安装的方法就不用说了，&lt;code&gt;sudo apt-get install scite&lt;/code&gt;就可以搞定。软件非常小，但其功能绝对不容小觑，只要你有耐心设置好配置文件，几乎任何一种语言都可以实现语法高亮、代码折叠和自动完成等功能。下面是编辑R脚本时的截图。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/09/SciTE_autocompletion.png'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/09/SciTE_autocompletion.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/09/SciTE_function_tips.png'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/09/SciTE_function_tips.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;要实现上面的效果，需要一些额外的配置文件，可以到下面下载。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;notice type=download&lt;/span&gt;下载：&lt;a href='../wp-content/uploads/2010/09/SciTE_config.zip'&gt;SciTE配置文件&lt;/a&gt;&lt;span&gt;/notice&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;配置方法：&lt;/p&gt;

&lt;p&gt;* 用管理员权限打开/usr/share/scite/SciTEGlobal.properties（具体的位置视系统而定），搜索其中的“import r”语句，将其前面的井号去掉；&lt;/p&gt;

&lt;p&gt;* 将附件中的r.api用管理员权限复制到/usr/share/scite中；&lt;/p&gt;

&lt;p&gt;* 将附件中的.SciTEUser.properties复制用户目录下，即/home/&amp;lt;用户名&amp;gt;。&lt;/p&gt;

&lt;p&gt;一些主要的配置选项都放在.SciTEUser.properties中，其中大都加了注释，可以按需要进行修改。修改时可以参照&lt;a href='http://www.scintilla.org/SciTEDoc.html'&gt;SciTE的官方文档&lt;/a&gt;获得完整的说明，没错，那里有上百个选项可以进行自定义，只要你有足够的耐心……&lt;/p&gt;

&lt;p&gt;事实上，SciTE是一个跨平台的编辑器，其配置文件也具有良好的兼容性，只需对配置文件做些许修改，在Windows下同样可以完成相同的功能。这里有个Windows版的SciTE，体积是小到令人发指的600K，要使用自动完成功能的话，需要把SciTEGlobal.properties的最后一行改成正确的路径。&lt;/p&gt;

&lt;p&gt;下载：&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/09/SciTE_win.zip'&gt;Windows版SciTE&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>R的原生并行2——修改BLAS</title>
   <link href="http://yixuan.github.com/2010/09/the-road-to-paralleled-r-2-modify-blas"/>
   <updated>2010-09-18T13:32:21+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/09/the-road-to-paralleled-r-2-modify-blas</id>
   <content type="html">&lt;p&gt;BLAS的全称是Basic Linear Algebra Subprograms，它是用FORTRAN语言编写的一套跟线性代数运算有关的函数，包括向量与向量的运算、向量与矩阵的运算以及矩阵与矩阵的运算三个层次。R的很多底层运算都是基于BLAS来完成的，比如常见的&lt;code&gt;%*%&lt;/code&gt;，用来完成矩阵的乘法。而要让R支持原生的并行计算，一个很重要的方面就是让BLAS本身可以通过并行计算来完成。幸运的是，BLAS中很多运算都是比较规整的循环语句，而这些语句恰恰可以通过OpenMP来实现并行。由于BLAS中的函数非常多，在此为了简便起见，我只修改了其中的dgemm.f文件，该文件主要是实现矩阵乘法运算。下面是我用修改后的BLAS源代码编译出的Rblas.dll文件，用它替换R的bin目录下的Rblas.dll（同时需要把压缩包中其它两个dll文件也复制到bin目录下），就可以对R的并行矩阵运算进行测试（注：程序的有效性可能会受CPU型号和架构的影响）。当然了，说是说修改源代码，其实就是参照&lt;a href='http://rajorshi.net/blog/2009/05/programming-for-multicore-introduction-openmp-gcc/'&gt;这篇文章&lt;/a&gt;对一些循环语句进行了并行化的声明。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;notice type=download&lt;/span&gt;下载：&lt;a href='../wp-content/uploads/2010/09/Rblas_OpenMP.zip'&gt;Rblas.dll&lt;/a&gt;&lt;span&gt;/notice&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;其中dgemm.f是修改后的程序，完整的BLAS源代码可以到&lt;a href='http://www.netlib.org/blas/blas.tgz'&gt;这里&lt;/a&gt;下载。&lt;/p&gt;

&lt;p&gt;下面是我电脑上的一些测试。 测试环境：&lt;/p&gt;

&lt;p&gt;* 操作系统——32位 Windows XP Home Edition SP3&lt;/p&gt;

&lt;p&gt;* CPU——Intel Core Duo T2300 1.66GHz（双核）&lt;/p&gt;

&lt;p&gt;* 内存——1.00GB DDR2&lt;/p&gt;

&lt;p&gt;测试程序：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;set.seed(123);
a=matrix(rnorm(4000000),2000);
system.time(a%*%a);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试结果：&lt;/p&gt;

&lt;p&gt;1. 用R自带的Rblas.dll：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; system.time(a%*%a);
  用户  系统   流逝
25.97  0.05 26.05&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;2. 用附件中的Rblas.dll：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; system.time(a%*%a);
  用户  系统   流逝
32.76  0.06 16.85&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;3. 用&lt;a href='http://ftp.ctex.org/mirrors/CRAN/bin/windows/contrib/ATLAS/'&gt;ATLAS优化的Rblas.dll&lt;/a&gt;：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; system.time(a%*%a);
  用户  系统   流逝
11.46  0.01 11.50&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中第一项和第三项测试CPU都只能使用单核。&lt;/p&gt;

&lt;p&gt;从结果可以看出，并行计算的时间几乎比一般的串行计算少了一半，但因为程序没有经过优化，所以还不如ATLAS优化过的BLAS。但是，如果CPU核的数量很多，ATLAS优化的BLAS依然只能使用一个核，性能将不会有明显的提升，但并行的BLAS则可以进一步提高性能。&lt;/p&gt;

&lt;p&gt;如果要进一步实现R的并行计算功能，我觉得有两方面的工作要做，一是将BLAS中的其它函数都进行相应的修改，而是将并行与ATLAS优化结合起来，进一步提高运算效率。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>R的原生并行——一个尝试</title>
   <link href="http://yixuan.github.com/2010/09/the-road-to-paralleled-r-1-a-first-trial"/>
   <updated>2010-09-17T00:23:34+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/09/the-road-to-paralleled-r-1-a-first-trial</id>
   <content type="html">&lt;p&gt;一直以来，R的并行计算都是一件令人头疼的问题。尽管有各种各样的包可以辅助地实现并行计算，但R本身依然只能使用一个核，这对于逐渐普及的多核CPU来说确实是一种资源的浪费。而对于我们普通用户来说，并行计算的编程和实现似乎是一件遥不可及的事，但昨天偶然在图书馆翻到的一本书却迅速改变了我的这种观点。下面先把图和真相贴出来。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/09/serial_matprod.png'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/09/serial_matprod.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/09/parallel_matprod.png'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/09/parallel_matprod.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;上面两幅图展示了同一个函数（矩阵乘法）的两种实现途径，第一种是普通的计算，从图中可以看出，只有一个CPU核处在完全使用状态，总的CPU利用率是50%；而第二种方法采用了并行计算，两个CPU核都是100%的使用率。从时间上来看，第二种方法几乎为第一种的一半，与CPU的利用率相吻合。&lt;/p&gt;

&lt;p&gt;可能你会觉得，第二个程序会比第一个程序复杂很多，但实际上，在它们的C程序源代码中，两段程序只有&lt;strong&gt;一行&lt;/strong&gt;是不同的！程序的C源代码、编译出的dll文件以及R源代码可以在&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/09/test_parallel.zip'&gt;这里&lt;/a&gt;下载得到，其主要原理就是使用了OpenMP这个支持并行计算的库。一个简单但很有启发性的介绍可以看&lt;a href='http://rajorshi.net/blog/2009/05/programming-for-multicore-introduction-openmp-gcc/'&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;事实上，R的很多代数运算都是基于BLAS系统的，而从网上的一些介绍来看，它也有支持并行计算的版本，如果可以把它直接链接到R中，那就有好戏看了……&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Rhelper-RGtk2版本</title>
   <link href="http://yixuan.github.com/2010/08/rhelper-rgtk2"/>
   <updated>2010-08-09T08:49:13+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/08/rhelper-rgtk2</id>
   <content type="html">&lt;p&gt;寒假的时候用wxWidgets程序库写过一个&lt;a href='http://yixuan.cos.name/cn/2010/01/please-help-me-test-a-program-rhelper/'&gt;Rhelper小程序&lt;/a&gt;，初衷是在chm类型的帮助文档被取消后，能提供一个类似的查看帮助的环境。当时编的那个程序基本实现了这一目标，但它有两个比较大的缺点：一是程序与R相脱离，调用起来不方便；二是程序只能在Windows下运行，对操作系统有依赖。由于当时能力和时间有限，所以也就没再多加考虑。&lt;/p&gt;

&lt;p&gt;之后，从谢老大那里得知了有gWidgets包的存在，顿时兴奋不已，因为这个包可以用简单的语句生成一系列的图形界面，而且不依赖于操作系统，甚至不依赖于图形界面库（GTK+，Java，tcl/tk等）。谢老大也以这个包为主题在&lt;a href='http://cos.name/2010/06/3rd-china-r-beijing-summary/'&gt;第三届中国R语言会议&lt;/a&gt;上做了&lt;a href='http://yihui.name/cn/wp-content/uploads/2010/06/3rd-ChinaR-gWidgets-Yihui-Xie.pdf'&gt;报告&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;当然了，越是方便的工具，其功能也越容易受到限制。就Rhelper来说，有两个问题必须要得到解决，一是要实现文档格式化（比如以HTML的形式展现），二是要实现超链接跳转。这两个要求在wxWidgets中都有现成的程序库可以解决，可是在gWidgets中都很难实现。&lt;a href='http://www.omegahat.org/'&gt;Omegahat&lt;/a&gt;曾经开发了一个&lt;a href='http://www.omegahat.org/RwxWidgets/'&gt;RwxWidgets包&lt;/a&gt;，用来在R中调用wxWidgets，可是这个包很久没有更新，而且似乎在Windows下很不稳定。最后综合各方面的因素，决定用比较底层的RGtk2包来实现Rhelper的功能。&lt;/p&gt;

&lt;p&gt;由于RGtk2包没有直接解析HTML的控件，所以文档的格式化成了程序中最大的一个难题。目前我是直接从Rd文档中获取文字和相应的标签，然后对不同的标签应用不同的格式。下面是两张效果图，分别是Windows下和Ubuntu下的运行界面：&lt;/p&gt;

&lt;p&gt;&lt;span&gt;caption id=&amp;#8221;attachment_403&amp;#8221; align=&amp;#8221;aligncenter&amp;#8221; width=&amp;#8221;484&amp;#8221; caption=&amp;#8221;Windows下运行界面&amp;#8221;&lt;/span&gt;(http://yixuan.cos.name/cn/wp-content/uploads/2010/08/Rhelper-RGtk2_Windows.png)](http://yixuan.cos.name/cn/wp-content/uploads/2010/08/Rhelper-RGtk2_Windows.png)&lt;span&gt;/caption&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;&lt;span&gt;caption id=&amp;#8221;attachment_404&amp;#8221; align=&amp;#8221;aligncenter&amp;#8221; width=&amp;#8221;482&amp;#8221; caption=&amp;#8221;Ubuntu下运行界面&amp;#8221;&lt;/span&gt;(http://yixuan.cos.name/cn/wp-content/uploads/2010/08/Rhelper-RGtk2_Ubuntu.png)](http://yixuan.cos.name/cn/wp-content/uploads/2010/08/Rhelper-RGtk2_Ubuntu.png)&lt;span&gt;/caption&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;其中蓝色的链接都是可以点击的（光标不会变成手形），不过目前Rd文档的解析仍然是个大工程，有很多函数的文档会出现格式混乱的现象，这个还需要不断修补。总之这个程序还只是一个初步的框架，很多细节仍有待完善。&lt;/p&gt;

&lt;p&gt;&lt;span&gt;notice type=download&lt;/span&gt;附件：&lt;a href='../wp-content/uploads/2010/08/Rhelper-RGtk2_dev.txt'&gt;程序代码下载&lt;/a&gt;&lt;span&gt;/notice&lt;/span&gt;&lt;/p&gt;

&lt;p&gt;用的时候输入&lt;code&gt;Rhelper(&amp;quot;&amp;amp;&amp;amp;&amp;quot;)&lt;/code&gt;之类的就可以了。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>再遇挫折</title>
   <link href="http://yixuan.github.com/2010/06/setback-again"/>
   <updated>2010-06-12T00:34:49+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/06/setback-again</id>
   <content type="html">&lt;p&gt;离会议只有两三天，又出现了诸多突发状况，实在是让人心神不宁啊。之前宫雨老师已经说不能出席了，今天又接到王剑师兄和一硕的消息，说是会议当天也来不了了，于是三场精彩的演讲就这样遗憾地无法展现在观众面前。文化衫的图案删了改，改了删，想要满足所有人的口味也是难上加难。观众带着期待而来，会不会留下遗憾而去？不敢多想。又一次遇到挫折，又一次不淡定了。或许我得想些办法调整一下心情了。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>用R处理照片打造铅笔画效果</title>
   <link href="http://yixuan.github.com/2010/05/processing-pictures-with-a-pencil-sketch-effect-using-r"/>
   <updated>2010-05-17T13:32:53+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/05/processing-pictures-with-a-pencil-sketch-effect-using-r</id>
   <content type="html">&lt;p&gt;之前看过一篇文章，介绍的是如何在GIMP中对照片进行处理，产生一种铅笔画的效果。原文在&lt;a href='http://the-double-0-project.net/blog/?p=58'&gt;这里&lt;/a&gt;，步骤主要分四步：&lt;/p&gt;

&lt;p&gt;1. 将照片去色；&lt;/p&gt;

&lt;p&gt;2. 复制图层，将图层反色；&lt;/p&gt;

&lt;p&gt;3. 对上层图层进行高斯模糊；&lt;/p&gt;

&lt;p&gt;4. 将上层图层设置为减淡属性；&lt;/p&gt;

&lt;p&gt;之前写了一篇&lt;a href='http://yixuan.cos.name/cn/2010/02/blur-and-smoothing/'&gt;跟高斯模糊有关的文章&lt;/a&gt;，里面的代码可以直接用，于是简单改了改，就可以实现上面的铅笔画效果了。代码如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blur&amp;lt;-function(x,grid,kernelf,...)
{
    if(grid&amp;lt;3) stop(&amp;quot;grid should be great than or equal to 3!&amp;quot;);
    if(grid%%2==0) stop(&amp;quot;grid should be odd number!&amp;quot;);
    v=sapply(1:grid-(grid+1)/2,kernelf,...);
    v&amp;lt;-v/sum(v);
    r&amp;lt;-(grid-1)/2;
    newx&amp;lt;-tmp&amp;lt;-x;
    for(i in (r+1):(nrow(x)-r))
    {
        tmp[i,]&amp;lt;-colSums(x[(i-r):(i+r),]*v);
    }
    for(j in (r+1):(ncol(x)-r))
    {
        newx[,j]&amp;lt;-colSums(t(tmp[,(j-r):(j+r)])*v);
    }
    return(newx);
}
kernel.gauss&amp;lt;-function(x,sigma) dnorm(x,0,sigma);
blur.gauss&amp;lt;-function(x,grid,sigma) blur(x,grid,kernel.gauss,sigma=sigma);

library(rimage);
image&amp;lt;-read.jpeg(&amp;quot;demo.jpg&amp;quot;);
image&amp;lt;-rgb2grey(image);
m&amp;lt;-blur.gauss(1-image,5,3);
pencil&amp;lt;-pmin(image+m,1)^2;

# For R before 2.11.0
plot(imagematrix(pencil));

# For R 2.11.0 and after, may be faster
x&amp;lt;-dim(pencil)[2];
y&amp;lt;-dim(pencil)[1];
par(mar=c(0,0,0,0));
plot(1,xlim=c(0,x),ylim=c(0,y),type=&amp;quot;n&amp;quot;,asp=1,axes=FALSE,xlab=&amp;quot;&amp;quot;,ylab=&amp;quot;&amp;quot;);
rasterImage(pencil,0,0,x,500);

# Use biOps package to write JPEG
library(biOps);
writeJpeg(&amp;quot;output.jpg&amp;quot;,imagedata(pencil)*255);&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;示例图片如下（点击看大图）:&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/05/pencil_sketch_demo.jpg'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/05/pencil_sketch_demo-300x187.jpg' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;效果图如下（点击看大图）：&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/05/pencil_sketch_output.jpg'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/05/pencil_sketch_output-300x187.jpg' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;biOps包到&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/05/biOps.zip'&gt;这里&lt;/a&gt;下载（包含了依赖文件）。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>硬盘安装Ubuntu 10.04</title>
   <link href="http://yixuan.github.com/2010/04/install-ubuntu-10-04-from-hard-disk"/>
   <updated>2010-04-30T18:24:11+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/04/install-ubuntu-10-04-from-hard-disk</id>
   <content type="html">&lt;p&gt;整个四月一篇博客也没写，今天来充个数好了，内容非原创，只不过是把Ubuntu硬盘安装的方式记录一下，免得到时候又上网到处找。&lt;/p&gt;

&lt;p&gt;* 第一步，下载GRUB4DOS，把其中的grub.exe和grldr解压到C盘根目录。&lt;/p&gt;

&lt;p&gt;* 第二步，创建menu.lst，内容如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;title Install Ubuntu
root (hd0,1)
kernel (hd0,1)/vmlinuz boot=casper iso-scan/filename=/ubuntu-10.04-desktop-i386.iso ro quiet
splash locale=zh_CN.UTF-8
initrd (hd0,1)/initrd.lz&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;理论上Windows的C盘应该是(hd0,0)的，但不知为何我这儿成了(hd0,1)。&lt;/p&gt;

&lt;p&gt;* 第三步，修改Windows启动项，加上语句&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;C:\grldr=&amp;quot;Install Ubuntu&amp;quot;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;* 第四步，把光盘镜像复制到C盘根目录，并解压其中的vmlinuz和initrd.lz。&lt;/p&gt;

&lt;p&gt;* 第五步，重启，进入Ubuntu光盘。其中要注意，安装之前需要在终端执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo umount -l /isodevice&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;我下的这个版本，安装完Ubuntu后Windows XP的启动菜单会消失，这时需要在终端下执行&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo update-grub&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;但据说官方会修复这个问题，把光盘重新打包。&lt;/p&gt;

&lt;p&gt;另：关闭按钮放在左边确实有些别扭……&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/04/Ubuntu.png'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/04/Ubuntu.png' /&gt;&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Processing R，你看见了什么？</title>
   <link href="http://yixuan.github.com/2010/03/processing-and-r"/>
   <updated>2010-03-26T15:25:51+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/03/processing-and-r</id>
   <content type="html">&lt;p&gt;标题里的Processing不是一个动名词，而是一个纯粹的名词。很早以前谢老大就曾&lt;a href='http://cos.name/cn/topic/15015'&gt;在COS论坛中推荐过Processing&lt;/a&gt;，特别是在“统计图形与数据可视化兴趣小组”成立之后。&lt;/p&gt;

&lt;p&gt;简单来说，Processing（主页&lt;a href='http://processing.org'&gt;http://processing.org&lt;/a&gt;）是一门定位于数据可视化的编程语言，它是用Java编写的，本身也可以跟Java互通，但Processing专注于图形方面的开发，所以在图形的绘制上（2D及3D）Processing具有更加简洁的语法，画出来的图也很漂亮。&lt;/p&gt;

&lt;p&gt;用Processing编好的程序，会被编译成Java中的类，同时还可以根据需要生成相应的可执行文件，在具有Java环境的系统中运行。因为是基于Java，所以Processing也是跨平台的（同时也是开源的）。&lt;/p&gt;

&lt;p&gt;可以先简单看看下面的这张截图，演示的是洛仑兹混沌理论的“蝴蝶效应”，动态运行的程序和源代码放在附件的Lorenz文件夹中（文章最后），运行需要Java环境支持，如果没有的话可以到&lt;a href='http://www.java.com/'&gt;http://www.java.com/&lt;/a&gt;下载。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/03/Lorenz.png'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/03/Lorenz.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Processing确实很艺术，不过对于数据的理解，光靠画图还是不够的。老大之前说过，就目前而言，Processing基本上跟统计没什么关系，因此它的作用更像是画图而不是数据可视化。如果想要结合统计分析与图形表达，一个很自然的想法就是让Processing这样的绘图工具与R这样的统计计算软件结合起来。R也有很强大的绘图功能，但是有一个小问题就是，对于动画这种表现形式，在R中会受到一些制约，这主要体现在R加载图形时会有一小段时间的缓冲，因此每一秒钟加载图形的数量不能太多，这使得图形的运动不够平滑，而且也较难表现高速的变化。Processing正好可以弥补这点不足，它默认的帧速是60帧/秒，这对于一般的视觉体验来说是足够了。&lt;/p&gt;

&lt;p&gt;幸运的是，Processing与Java的结合非常紧密，而R与Java的沟通又可以通过rJava包来实现，所以在Processing中使用R的函数也就成为了可能。下面再给一个演示布朗运动的例子，程序和源代码放在附件的Brown_trace文件夹中。以下两张图是两次布朗运动的“轨迹”实现，其中需要用到的随机数都是通过R来生成的。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/03/Brown.trace1_.png'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/03/Brown.trace1_.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/03/Brown.trace2_.png'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/03/Brown.trace2_.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;（大家来找茬：通过以上两幅图，你能找出两次“轨迹”实现中&lt;strong&gt;共同的起点&lt;/strong&gt;吗？）&lt;/p&gt;

&lt;p&gt;要在Processing中调用R的函数，需要做以下几件事：&lt;/p&gt;

&lt;p&gt;* 把R的bin目录放到系统PATH中；&lt;/p&gt;

&lt;p&gt;* 在R中装好rJava包；&lt;/p&gt;

&lt;p&gt;* rJava包下面有一个jri文件夹，把这个文件夹的路径也放到系统PATH中。&lt;/p&gt;

&lt;p&gt;在购建Processing的项目时，点击Sketch-&amp;gt;Add File&amp;#8230;添加之前jri文件夹中的JRI.jar文件，然后参照Brown_trace的例子写一些导入库的语句以及TextConsole类的声明。后面就可以通过Rengine和REXP等定义好的类型去调用R的函数，这一部分可以参照jri文件夹下的examples。&lt;/p&gt;

&lt;p&gt;附件：&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/03/Processing.zip'&gt;点击这里下载&lt;/a&gt;说明：每个例子都包含三个文件夹，格式是application.&lt;em&gt;，代表了不同的操作系统。再里面有一个source文件夹，其中.pde文件是Processing的源文件，.java文件是将.pde文件转换成的java源文件。&lt;/em&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>广告时间</title>
   <link href="http://yixuan.github.com/2010/03/advertisement-time"/>
   <updated>2010-03-22T18:12:13+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/03/advertisement-time</id>
   <content type="html">&lt;p&gt;又有两位重量级COS老大入驻cos.name，大家速速前去围观！&lt;/p&gt;

&lt;p&gt;一硕：&lt;a href='http://yishuo.cos.name'&gt;My Blog: Statistics, Literature, And Fantasy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;冰大：&lt;a href='http://bing.cos.name/'&gt;青蓝冰水&lt;/a&gt;&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>Copula，奇妙并困惑着</title>
   <link href="http://yixuan.github.com/2010/03/copula-marvelous-and-confusing"/>
   <updated>2010-03-18T18:36:01+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/03/copula-marvelous-and-confusing</id>
   <content type="html">&lt;p&gt;毕业论文想写一些跟Copula有关的东西。之前在寒假的时候，已经阅读了一些文献，算是大概弄明白了Copula是什么。简单来说，它可以看作是一种连接函数，即把随机变量的联合分布与其各自的边缘分布连接起来。用一个简单的式子表达，就是&lt;span&gt;tex&lt;/span&gt;F_{XY}(x,y)=C(F_X(x),F_Y(y))&lt;span&gt;/tex&lt;/span&gt;，其中的C( , )就是传说中的Copula。&lt;/p&gt;

&lt;p&gt;进一步来说，Copula有一个更有意思的含义。我们知道，如果&lt;span&gt;tex&lt;/span&gt;X\sim F_X(x)&lt;span&gt;/tex&lt;/span&gt;，那么&lt;span&gt;tex&lt;/span&gt;U=F_X(X)\sim U(0,1)&lt;span&gt;/tex&lt;/span&gt;，即将一个随机变量的分布函数作用到这个随机变量上时，它将变成一个(0,1)上的均匀分布。类似地，也有&lt;span&gt;tex&lt;/span&gt;V=F_Y(Y)\sim U(0,1)&lt;span&gt;/tex&lt;/span&gt;，于是乎， &lt;span&gt;tex&lt;/span&gt;\begin{array}{ll}P(U\le u, V\le v)&amp;amp;=P(F_X(X)\le u, F_Y(Y)\le v)=P(X\le F_X^{-1}(u),Y\le F_Y^{-1}(v))\&amp;amp;=F_{XY}(F_X^{-1}(u),F_Y^{-1}(v))=C(u,v)\end{array}&lt;span&gt;/tex&lt;/span&gt; 这就说明，式中的Copula函数正是U和V的联合分布。在这个意义上，两个随机变量的分布函数可以被巧妙地拆成三个部分：两个边缘分布，以及另外一个联合分布。这条性质使得分布的建模更具灵活性。在很久很久以前，我们为了描述(X,Y)的联合分布，一般都只用一个单一的分布族，而且这个分布族的结构也不会太复杂，否则写出来的公式会让人难以忍受。此外，限定了联合分布就相当于隐性地限定了边缘分布，这有时候不符合实际。而用Copula的分解公式，我们就可以分别指定边缘分布和联合结构的形式，使得模型的解释力更强。此奇妙之一也。&lt;/p&gt;

&lt;p&gt;关于Copula函数，有一个重要的不等式，即对任意的一个Copula函数C( , )以及任意满足定义域的实数u和v，有 &lt;span&gt;tex&lt;/span&gt;\max{u+v-1,0}\le C(u,v)\le \min{u,v}&lt;span&gt;/tex&lt;/span&gt; 特别地，不等式的左右两端也是两个Copula函数，分别称为下界Copula和上界Copula。当两个随机变量的Copula函数达到上界时，这两个随机变量将是完全的“正相关”；反之，达到下界时将是完全的“负相关”。在Copula中，完全“正相关”是这样定义的：假设有一个随机向量(X, Y)，(x1, y1)和(x2, y2)是它的两个实现值，那么(x1 - x2)与(y1 - y2)符号相同的概率为1；类似地，完全“负相关”就是它们符号相反的概率为1。任何一个Copula函数，都一致地被上界Copula和下界Copula所包围，所以Copula函数是对随机变量之间相关性或依赖性的一种度量。此奇妙之二也。&lt;/p&gt;

&lt;p&gt;如果上面的这些都不够让你兴奋的话，那么可以看看下面这条性质。这一条说的是，如果随机向量(X, Y)的Copula函数是C(u, v)的话，那么对于两个单调不减的函数f和g，随机向量(f(X), g(Y))的Copula函数将依然是C(u, v)！这一点很容易让人联想到Spearman秩相关系数，它对于这种单调变换也可以保持相关系数不变，但Spearman秩相关系数只是利用了数据秩的信息，而Copula则是在分布的级别上保持变量依存关系的不变性。此奇妙之三也。&lt;/p&gt;

&lt;p&gt;好了，奇妙说到这里，就谈谈我的一些困惑了。简单说来是四个字：干嘛用的？由于我才疏学浅，我总感觉使用Copula的主要目的依然是对分布进行估计和拟合，那么它相对于传统的一些方法而言，优势在哪儿呢？如果说灵活性是其最大的优势，那我不仅要说，传统的估计方法只是对于一个分布有模型误设的风险，现在凭空多出的两个待估计分布，其增加的风险会不会大于灵活性所减少的风险呢？再进一步说，如果采用的是非参数的密度估计方法，那么传统方法与Copula方法都没有模型误设的问题（我们一般认为非参密度估计没有模型误差，只有估计误差），但Copula方法多出了两个待估计的分布，给人的感觉就是误差一定会比直接估计的要大，这是不是说非参数密度估计在Copula中就完全不适用了呢？可是实际问题中参数方法总是有很大的局限，特别是样本量很大时非参方法明显具有很大的优势，如果这样就被Copula拒之门外是不是又太可惜了呢？不解啊，不解。&lt;/p&gt;

&lt;p&gt;路漫漫其修远兮，吾将上下而求索……&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>天啊，真开了？！</title>
   <link href="http://yixuan.github.com/2010/02/oh-it-really-opens"/>
   <updated>2010-02-25T14:00:33+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/02/oh-it-really-opens</id>
   <content type="html">&lt;p&gt;以前在博客里写过几句话，说是我们其实每天都在享受开源作者的劳动果实，比如“正宗宫保鸡丁”的配料。结果今天看到一则新闻，倒是把这个不靠谱的论断给证实了，&lt;a href='http://www.networkworld.com/community/node/57846'&gt;真相在此&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;不过还是那句话啊，给我源码也没用啊，谁叫我没有编译器呢……&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>模糊和平滑</title>
   <link href="http://yixuan.github.com/2010/02/blur-and-smoothing"/>
   <updated>2010-02-24T10:36:56+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/02/blur-and-smoothing</id>
   <content type="html">&lt;p&gt;用过Photoshop或者GIMP的朋友应该都对高斯模糊这个工具比较熟悉。我虽然对作图不怎么了解，但隐约感觉投影效果中的阴影就是用高斯模糊做成的。下面是一个简单的高斯模糊的示例（&lt;a href='http://www.zcool.com.cn/gfx/ZNzMyNjQ=.html'&gt;图片来源&lt;/a&gt;），还有一个真相请看&lt;a href='http://yihui.name/cn/2010/02/a-big-thank-you-to-linlin-yan/'&gt;这里&lt;/a&gt;：&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/02/Gaussian-Blur.png'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/02/Gaussian-Blur.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其中右半部分应用了高斯模糊的效果，看起来就像是在画面上盖了一层毛玻璃。那么这种效果是怎么实现的呢？其实啊，看到高斯这个名号，就不由地让人警觉起来——他的渗透力实在太大了。&lt;/p&gt;

&lt;p&gt;在网上找了几篇介绍高斯模糊的文章——&lt;a href='http://zh.wikipedia.org/wiki/%E9%AB%98%E6%96%AF%E6%A8%A1%E7%B3%8A'&gt;维基&lt;/a&gt;、&lt;a href='http://www.cnblogs.com/hoodlum1980/archive/2008/03/03/1088567.html'&gt;博客一&lt;/a&gt;、&lt;a href='http://blog.sina.com.cn/s/blog_4b97ab670100aa3a.html'&gt;博客二&lt;/a&gt;，看着里面的几个公式那叫一个亲切啊，虽然世间“高斯”的含义有很多，但此处的高斯自然就是统计中最熟悉不过的正态分布了。维基中对高斯模糊的解释挺吓人，“图像的高斯模糊过程就是图像与正态分布做卷积”，像我这种数学根基不好的看到这里便肃然起敬，只好通过后面博客中的例子来理解了。&lt;/p&gt;

&lt;p&gt;看来看去，终于看到了一些熟悉的东西，原来高斯模糊和平滑技术中的核函数回归是一回事。先看下面这两张图（从_&lt;a href='http://www-stat.stanford.edu/~hastie/local.ftp/Springer/ESLII_print3.pdf'&gt;The Elements of Statistical Learning&lt;/a&gt;&lt;em&gt;中截的）：&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/02/smoothing.png'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/02/smoothing.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;其中散点图代表了y与x之间的对应关系。可以看出，随着x的增大，y的取值会上下起伏，变动比较大；而图中的蓝线非常光滑，同时又体现了散点图的大致走向，因此可以认为蓝线是这堆散点的一种规律性描述。事实上，图中的散点就是在蓝线的基础上加以随机误差而生成的。在大多数的情况下，我们能够获得的信息就是图中的散点，而蓝线则是我们想要得到的规律，于是我们面临的问题就是用这些已知的数据去估计未知的结构。图中的绿线做的就是这件事，左图用的是最近邻法，右图是用的是Epanechnikov核函数法。具体的计算细节在此不多加讨论，但总结起来它们都做了同样一件事：为了估计某个点x0处y的取值y0，先在x0处开一扇窗子，让某些点进入窗子，其它的排除在外；这样一来，窗子内的每个点xi都有其对应的y的取值yi，然后用某种权重将这些yi组合起来，作为y0的估计。举个例子来说，如果要估计x=0.5时y的取值，先构造一扇窗子(0,1)，那么只有x取值在这个范围内的点才能进入；假定进入窗子的点有(0.2, 1)(0.4, 0.5)(0.8, 0.2)三个，其权重假定为0.2、0.6和0.2，那么x=0.5时y取值的估计就是0.2&lt;em&gt;1+0.6&lt;/em&gt;0.5+0.2&lt;em&gt;0.2=0.54。在实际计算的时候，窗子的宽度怎么定，窗内点的权重怎么定，是主要要讨论的内容。上面那幅图左边的最近邻法比较简单，就是对离x0最近的k个点取算术平均，而右边的则相对复杂些，如果感兴趣的话可以看看那本书的第193页。&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;回到正题，在高斯平滑方法中，也基本上是遵循了这条套路，但它的窗子取的是整个实数集，也就是说，图中的所有点都将参与运算，这样一来就只剩下如何确定权重这个问题了。关于这一点，我们应该会有一种直观的感觉，那就是，离我越近的点，我就应该越相信它，因此这个权重很自然地就会取成是两点横坐标之差的函数，而且它应该有两条性质：一是应该关于y轴对称，即在我左边和在我右边是同等待遇；二是离我越远，其权重就应该越小，即满足“亲疏原则”。很显然，正态分布的密度函数就满足这两个条件。以标准正态分布的密度函数φ(x)为例，假设有三个点，离我的距离分别是1，2和3，那么它们权利的大小就分别是φ(1)=0.242，φ(2)=0.054和φ(3)=0.004，相应的权重分别为0.242/(0.242+0.054+0.004)=0.807，0.054/0.3=0.18和0.004/0.3=0.013。我们知道正态分布有两个参数，μ和σ^2，根据前面的对称性原则，μ必须要为0，而σ则可以根据实际情况来变化。一般来说，σ越大，密度曲线就越平坦，等权的倾向也就越大。下面的公式是估计值的表达式，其中的K(,)就是核函数，相当于是不同点“决定权”大小的度量，图中的三条曲线是三种不同的核。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/02/kernel.png'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/02/kernel.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;让人感到惊奇的是，这种平滑技术在视觉上的效果就是图像的模糊变化。电脑屏幕上所看到的图像都是由像素点构成的，而颜色则是由一个三维向量(R, G, B)来表示，其中三个分量分别代表了红色、绿色和蓝色的亮度。简单一点，如果只考虑黑白色系，那么颜色就由其“黑的程度”来表达，定义黑为0，白为1，于是任何一种灰色都可以对应到(0, 1)之中的一个实数。想像一下，电脑上的一幅黑白照片其实可以看作是三维空间中的一幅散点图，x轴和y轴分别对应了某个像素点在电脑屏幕上的水平和垂直坐标，z轴则是这个像素点颜色的深浅。要对这幅三维散点图进行平滑，步骤完全一样，只是这时决定权重的函数变成了二元正态分布的密度函数。一般来说，其中的ρ参数都会取成0，即两个分量是相互独立的，而两个方向上的σ则是所谓的X方向和Y方向上的模糊半径。&lt;/p&gt;

&lt;p&gt;前面说到，用正态分布来进行平滑，所有的点都要参与运算，这在实际操作中运算量是相当大的。但我们知道，正态密度曲线衰减的速度是比较快的，3σ之后与0相差无几，因此在计算时可以人为地划定一个框（比如3×3或5×5等），只对框内的点进行加权。下面就给出一段R语言程序，用来在R中实现高斯模糊的效果。需要说明的是，这段程序只适用于灰度的jpg或jpeg图片，而且算法没有经过优化，速度可能会&lt;strong&gt;非常慢&lt;/strong&gt;。rimage包和示例图片到&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/02/Gaussian-Blur.zip'&gt;这里&lt;/a&gt;下载。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#生成“框”中各个元素的权重，grid是框的边长。
gaussm = function(grid, sigma) {
    m = outer(1:grid, 1:grid, function(x, y) dnorm(x - (grid +
        1)/2, 0, sigma) * dnorm(y - (grid + 1)/2, 0, sigma))
    return(m/sum(m))
}
#加载rimage包。
library(rimage)
#指定框的边长和sigma的取值。
grid = 5
sigma = 3
#生成框。
m = gaussm(grid, sigma)
#读取图片，这段程序中需要灰度的jpg或jpeg图片。
pic = read.jpeg(&amp;quot;demo.jpg&amp;quot;)
#把图片转成像素矩阵。
picm = pic[, ]
newm = picm
r = (grid - 1)/2
#对像素点逐一进行转换，为了简便起见没有包括图片边缘上的点。
for (i in (r + 1):(ncol(picm) - r)) {
    for (j in (r + 1):(nrow(picm) - r)) {
        newm[j, i] = sum(picm[(j - r):(j + r), (i - r):(i + r)] *
            m)
    }
}
#画出原来的图片。
plot(pic)
#新开一个窗口，画出高斯模糊后的图片。
x11()
plot(imagematrix(newm))&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;strong&gt;更新后的代码&lt;/strong&gt;，速度应该更快，而且支持彩色图片，可以更换核函数（参数kernelf），感谢Linlin Yan：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;blur&amp;lt;-function(x,grid,kernelf,...)
{
    if(grid&amp;lt;3) stop(&amp;quot;grid should be great than or equal to 3!&amp;quot;);
    if(grid%%2==0) stop(&amp;quot;grid should be odd number!&amp;quot;);
    v=sapply(1:grid-(grid+1)/2,kernelf,...);
    v&amp;lt;-v/sum(v);
    r&amp;lt;-(grid-1)/2;
    newx&amp;lt;-tmp&amp;lt;-x;
    is.grey&amp;lt;-length(dim(x))&amp;lt;3;
    for(i in (r+1):(nrow(x)-r))
    {
        if(is.grey)
        {
            tmp[i,]&amp;lt;-colSums(x[(i-r):(i+r),]*v);
        }else{
            for(k in 1:3)
            {
                tmp[i,,k]&amp;lt;-colSums(x[(i-r):(i+r),,k]*v);
            }
        }
    }
    for(j in (r+1):(ncol(x)-r))
    {
        if(is.grey)
        {
            newx[,j]&amp;lt;-colSums(t(tmp[,(j-r):(j+r)])*v);
        }else{
            for(k in 1:3)
            {
                newx[,j,k]&amp;lt;-colSums(t(tmp[,(j-r):(j+r),k])*v);
            }
        }
    }
    return(newx);
}
kernel.gauss&amp;lt;-function(x,sigma) dnorm(x,0,sigma);
blur.gauss&amp;lt;-function(x,grid,sigma) blur(x,grid,kernel.gauss,sigma=sigma);

library(rimage);
a=read.jpeg(&amp;quot;demo.jpg&amp;quot;);
m=blur.gauss(a,5,3);
plot(imagematrix(m));&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>请大家帮忙测试一个小程序Rhelper</title>
   <link href="http://yixuan.github.com/2010/01/please-help-me-test-a-program-rhelper"/>
   <updated>2010-01-28T17:44:38+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/01/please-help-me-test-a-program-rhelper</id>
   <content type="html">&lt;p&gt;昨天bjt大哥写了&lt;a href='http://www.bjt.name/2010/01/chinese-earthquake-visualization/'&gt;一篇很有启发性的文章&lt;/a&gt;，然后在评论中问曰：“yixuan 最近没怎么更新博客啊！”答曰：“寒假回家堕落了……”&lt;/p&gt;

&lt;p&gt;这是真话。一回到家，就彻底没了上进的念头，什么东西都不想学，也什么东西都不想写了。经大哥这一提醒，才发现日子确实不能这么过啊，总得逼着自己找点事做。突然想起回家前在学校折腾着编了一个小程序，但还没有完成，于是今天就花了些时间把它完善了一下，想请大家帮忙测试测试，找点BUG什么的。:)&lt;/p&gt;

&lt;p&gt;程序暂且取名叫Rhelper，其作用是让2.10.0以上的R重新焕发chm的风采。自从R升级到2.10.0后，其帮助文件都是动态生成的，原来的chm格式不再支持，这使得很多useRs一时难以适应。纯文本的帮助没有函数之间的超链接，因此在See Also的时候会比较麻烦，得重新去找；html帮助是一个不错的选择，但也有朋友说不如chm的直观，因为后者在左侧列出了包中的所有函数，可以快速查看相关的内容。&lt;/p&gt;

&lt;p&gt;鉴于此，我之前便萌生了一个想法，就是把帮助文件动态生成的特性与chm的优点结合起来，为2.10.0以上版本的R做一个简便易用的帮助系统。下面是一幅程序运行的截图：&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/01/Rhelper.png'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/01/Rhelper-300x211.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;程序主要由两部分组成，一部分是外部程序，用以打开动态生成的html文件，另一部分是R中的函数，用来调用这个外部程序。程序可以从&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/01/Rhelper_bin_20100130.zip'&gt;这里&lt;/a&gt;下载，“安装”的办法是把压缩包里的Rhelper.exe和libgcc_s_dw2-1.dll复制到R安装目录的bin文件夹中，然后在R中运行Rhelper.R中的函数。如果准备经常用的话，可以把这个函数加入到etc/Rprofile.site中，这样每次打开R的时候程序就会自动把&lt;code&gt;Rhelper()&lt;/code&gt;这个函数载入，用的时候只需&lt;code&gt;Rhelper(topic)&lt;/code&gt;，比如&lt;code&gt;Rhelper(par)&lt;/code&gt;就可以了。&lt;/p&gt;

&lt;p&gt;目前这个程序已经实现了帮助文件中函数超链接的跳转，但一些外部的链接（比如链接到网站）和最底下的索引页链接还暂时无法实现。此外一个问题是这个程序的打开速度可能会比R自己的帮助慢零点几秒，因为这个程序调用了R中的一些函数，在用这些函数时相当于要新打开一个R进程。&lt;/p&gt;

&lt;p&gt;我不太确定这个程序在其它机器上能不能正常运行，如果没有什么大问题的话，我准备发到&lt;a href='http://cos.name/bbs'&gt;COS&lt;/a&gt;上去，看看大家的意见。如果程序有BUG，敬请提出，谢谢！&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;感谢lanfeng：&lt;/strong&gt;之前我还不知道，原来图片是用绝对路径放到程序中的，所以之前的程序在其它机器上没办法显示两个图标。现在还不知道怎么把图片编译到程序中，总感觉放两张图太累赘……&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;20100129更新：&lt;/strong&gt;图标的问题搞定了，现在无需那两张png就可以显示图片了。lanfeng碰到的问题我暂时没有遇到，所以不知道应该怎样修改程序，但我想确定一下，你的那些包是不是最新版本的？如果是比较老的，还带有chm帮助的，可能会有些问题。此事还有待查证。&lt;/p&gt;

&lt;p&gt;回谢老大的问题：默认的加载页面是我胡乱设定的，因为是Rhelper嘛，所以就选择&lt;code&gt;help()&lt;/code&gt;函数的帮助了。:)&lt;br /&gt;生成html的方法是用&lt;code&gt;tools&lt;/code&gt;包里的&lt;code&gt;tools:::fetchRdDB()&lt;/code&gt;函数和&lt;code&gt;Rd2HTML()&lt;/code&gt;函数，前者从每个包的help/*.rdb数据库中抓出Rd对象，后者把这个Rd对象转成html。函数的使用方法可以看R源码包src/library/utils/R/help.R的第237行。&lt;br /&gt;函数跳转就是读取超链接地址中提供的包名和Rd文档名，然后用类似的方法生成html。不过有时候包名好像有问题，比如&lt;code&gt;graphics&lt;/code&gt;包里链到&lt;code&gt;grDevices&lt;/code&gt;包的函数，其路径还是&lt;code&gt;graphics&lt;/code&gt;，遇到这种情况时只能再用一次&lt;code&gt;help()&lt;/code&gt;来搜索。&lt;br /&gt;这个程序是用开源的GUI库wxWidgets写的，里面提供了显示html的控件，也正是因为这个我才有打算编出这个程序。不知道wxWidgets跟gWidgets有没有关系，如果有联系的话可能移植起来会方便些。&lt;/p&gt;

&lt;p&gt;源代码在&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/01/Rhelper_src_20100130.zip'&gt;这里&lt;/a&gt;下载。（纯业余，不知道怎么生成标准的源码结构，就把Code::Blocks的工程文件发上来了。工程可以直接用Code::Blocks打开，但里面的一些依赖库的路径得改。）&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>VIM、文泉驿、器与道</title>
   <link href="http://yixuan.github.com/2010/01/vim-wenquanyi-tool-and-tao"/>
   <updated>2010-01-04T23:05:20+08:00</updated>
   <id>hhttp://yixuan.github.com/2010/01/vim-wenquanyi-tool-and-tao</id>
   <content type="html">&lt;p&gt;先引一则Joke，来自于&lt;em&gt;Autoconf&lt;/em&gt;手册的第一章：&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;A physicist, an engineer, and a computer scientist were discussing the nature of God.&lt;/p&gt;

&lt;p&gt;&amp;#8220;Surely a Physicist,&amp;#8221; said the physicist, &amp;#8220;because early in the Creation, God made Light; and you know, Maxwell&amp;#8217;s equations, the dual nature of electromagnetic waves, the relativistic consequences&amp;#8230;&amp;#8221;&lt;/p&gt;

&lt;p&gt;&amp;#8220;An Engineer!,&amp;#8221; said the engineer, &amp;#8220;because before making Light, God split the Chaos into Land and Water; it takes a hell of an engineer to handle that big amount of mud, and orderly separation of solids from liquids&amp;#8230;&amp;#8221;&lt;/p&gt;

&lt;p&gt;The computer scientist shouted: &amp;#8220;And the Chaos, where do you think it was coming from, hmm?&amp;#8221;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;最近又在瞎折腾东西。不知是哪天脑子突然短路，决定去碰一碰传说中的上古神器Vim，于是怀着无比敬畏的心情敲下了&lt;code&gt;sudo apt-get install vim&lt;/code&gt;。一阵云烟飘过，便来到了神器面前。跟着里面自带的30分钟入门教程还有网上的一些讲解，好歹算是把右脚踏进了门里面。左h右l上k下j，O前o后g头G尾，不得不说用Vim写东西真的跟弹琴一样。&lt;/p&gt;

&lt;p&gt;在Ubuntu下玩了一阵子，觉得Vim确实是一个Very Interesting Modifier，于是准备在Windows下也培养培养感情，要不然拿着一个记事本也不好意思见人啊。 在网上下好了相关的文件，打开Vim，感觉默认的字体不怎么好看（应该就是记事本的那种字体），而相比之下Ubuntu下的字体却很清爽，于是准备把字体给换了。上网搜了些教程，也下载试了一些别人推荐的字体，但要么是来历不明（比如各种版本的YaHei），要么是对中文无效，总之折腾了半天还是很乱。此外一个很头疼的问题是等宽字体，英文字体要等宽不是什么难事，但中文就麻烦了，如果要让中文的宽度等于两倍的英文，那么要么是英文太瘦，要么是中文太宽，总之很难协调好。&lt;/p&gt;

&lt;p&gt;后来想起Ubuntu下默认的是文泉驿，于是准备在Windows下也试试。看了官网的一些介绍，最后下载的是矢量的微米黑字体。按照官网的介绍，这款字体“很小很强大”，小是因为它的体积只有2M多，解开也不过5M多，但其功能却决不含糊。下面是我配置好字体后Vim的一个截图：&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2010/01/wenquanyi.png'&gt;&lt;img alt='' src='http://yixuan.cos.name/cn/wp-content/uploads/2010/01/wenquanyi.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;可以看出字体的边缘都很平滑，视觉效果还是不错的。此外这个字体对于中文的等宽处理是让中文之间留出一个空档，避免中文太胖，但每个中文字的左侧都是与英文相对齐的。&lt;/p&gt;

&lt;p&gt;说到&lt;a href='http://wenq.org/'&gt;文泉驿&lt;/a&gt;感觉确实应该大赞一下这个项目，按照网上流传的一句话，有了文泉驿，终于不用到font文件夹中偷偷拷字体出来了。而我对于文泉驿另外一个欣赏之处是它到处都充满了中国文字的气息，从那句“开彼源兮，斯流永继”，到它的一系列中文&lt;a href='http://zh.wikipedia.org/wiki/%E6%96%87%E6%B3%89%E9%A9%BF'&gt;开发代号&lt;/a&gt;（盘古、夸父、炎黄、尧舜、战国、赢政等等），感觉就是一部现代科技下的文字史书。&lt;/p&gt;

&lt;p&gt;把字体配置好了之后，又在网上逛了逛，看到了&lt;a href='http://www.cnblogs.com/Henrya2/archive/2009/02/21/1395591.html'&gt;一段操作Vim的截图动画&lt;/a&gt;，当时的第一感觉就是，人类的科技已经发达到了这种地步……当然我目前是用不着这些高科技了，所以也没再研究，只是又把一些细节配置了一下。&lt;/p&gt;

&lt;p&gt;折腾了半天，似乎感觉到了一种满足感，但仔细想想，花了一整天时间在这上面是不是值得？就算学会甚至精通了Vim，对你是不是真的有很大帮助？就算Vim真的是神器，可它终究也只是一个器啊。如若道已不存，器又有何用呢？&lt;/p&gt;

&lt;p&gt;仔细审视一下自己大四以来的生活，发现自己已经很久没有用心读过诗书，也很久没有认真学过知识了，整天好像都是在被一些“器”所诱惑着。这就好比江湖有传闻说某某神兵降世，夺得之后便可无敌于天下，于是各路豪杰无心钻研武艺，只知向神兵进发。而结果如何？众武侠小说已经为我们说明了一切。&lt;/p&gt;

&lt;p&gt;“一箪食，一瓢饮，在陋巷”，真正对于道的追求，是要放下很多执念，也是要抵制很多诱惑的。看来我还差得很远很远啊。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>其实微软挺幽默的</title>
   <link href="http://yixuan.github.com/2009/12/in-fact-ms-is-very-humorous"/>
   <updated>2009-12-31T20:29:05+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/12/in-fact-ms-is-very-humorous</id>
   <content type="html">&lt;p&gt;&lt;img alt='ms1' src='http://yixuan.cos.name/cn/wp-content/uploads/2009/12/ms1.png' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt='ms2' src='http://yixuan.cos.name/cn/wp-content/uploads/2009/12/ms2.png' /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img alt='ms3' src='http://yixuan.cos.name/cn/wp-content/uploads/2009/12/ms3.png' /&gt;&lt;/p&gt;

&lt;p&gt;算是年底给大家找点乐子吧。:-)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>原来R里面的很多函数是可以直接调用的</title>
   <link href="http://yixuan.github.com/2009/12/many-functions-can-be-called-from-r"/>
   <updated>2009-12-29T13:28:57+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/12/many-functions-can-be-called-from-r</id>
   <content type="html">&lt;p&gt;以前一直只知道用R可以调用C程序，昨天猛然一试发现C也可以调用R的。大家不妨看看R目录include子目录里的Rmath.h看看，里面定义了一系列跟分布有关的函数，也就是我们常用的rdpq系列。但是这个头文件中只有定义，这些函数的实现已经被编译到bin目录下的R.dll中了（这里都是指Windows系统）。下面就简单演示一下怎么在C中调用这些函数。&lt;/p&gt;

&lt;p&gt;首先，建立一个能让程序安身立命的文件夹（其实是废话……）；&lt;/p&gt;

&lt;p&gt;其次，配置一下能让程序安身立命的环境，主要是把R的bin文件夹添加到系统路径，然后需要有GCC编译器（Rtools中自带了）；&lt;/p&gt;

&lt;p&gt;第三，把R目录下的include文件夹以及bin文件夹中的R.dll拷贝到刚才那个安身立命的文件夹中，并把R.dll重命名为libR.dll；&lt;/p&gt;

&lt;p&gt;第四，编写C语言文件，示例如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;Rmath.h&amp;gt;

int main()
{
    double a=Rf_dnorm4(0,0,1,0);
    printf(&amp;quot;%f&amp;quot;,a);

    return 0;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中&lt;code&gt;Rf_dnorm4()&lt;/code&gt;是求正态分布密度的函数，参数的意义见R中的&lt;code&gt;dnorm()&lt;/code&gt;。&lt;/p&gt;

&lt;p&gt;第五，假设上述C程序保存为test.c，那么现在总的文件夹中将有如下的东西：一个include文件夹，一个libR.dll以及一个test.c。打开cmd，cd进这个文件夹，然后输入下面的命令：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gcc -o test test.c -I./include -L. -lR&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不出意外的话文件夹中应该已经生成了一个test.exe文件。在刚才的cmd中输入test，屏幕上应该就会打印出0.398942，这就是标准正态分布的密度函数在0点的取值。&lt;/p&gt;

&lt;p&gt;解释一下gcc命令的几个参数。-o以及后面的test是指定生成的程序的名称；-I./include是让gcc程序在当前目录的include文件夹中搜索头文件（这就是为什么之前要把include文件夹拷过来），因为我们用到了Rmath.h；-L.（注意有个点！）是让gcc程序在当前目录中搜索库文件（比如本例中的dll文件），-lR是指定要载入的库文件的名称（这个比较诡异，比如-l后面如果跟的是abc，那么它要载入的就是libabc.dll，也就是说库文件的开头一定要有lib这个字眼，这也是为什么之前要把R.dll改成libR.dll）。&lt;/p&gt;

&lt;p&gt;另外要注意的是，为了保证程序能正确运行，一定要让程序能找到R目录bin文件夹中的几个dll，而且缺一不可。如果你没有将bin目录添加到系统路径，那么就应该将那几个dll拷贝到程序的同一目录下。&lt;/p&gt;

&lt;p&gt;嗯，暂时没了。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>统计版《青花瓷》</title>
   <link href="http://yixuan.github.com/2009/12/statistics-version-of-blue-and-white-porcelain"/>
   <updated>2009-12-17T22:27:33+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/12/statistics-version-of-blue-and-white-porcelain</id>
   <content type="html">&lt;p&gt;嗯嗯，灵感来源于&lt;a href='http://www.cos.name/bbs/read.php?tid=2664'&gt;这里&lt;/a&gt;和&lt;a href='http://tieba.baidu.com/f?kz=610323497'&gt;这里&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;写这个东西有两个原因，一是向ypchen、fan和jingjing赔罪，那天你们请我去唱歌，但因为那天下午有会，再加上本人实在是五音不全，所以嗓子唱不了只好用手唱一首，聊表歉意。&lt;/p&gt;

&lt;p&gt;其二是考研马上就要到了，在此向所有奋斗在考研一线的同志们表示最衷心的祝福，愿你们在紧张的复习之余也能偶尔轻松一下。:-)&lt;/p&gt;
&lt;p style='text-align: center;'&gt;统计版《青花瓷》&lt;/p&gt;&lt;p style='text-align: center;'&gt;高斯的钟/轻划破/每一个晨曦&lt;br /&gt;
布朗的桥/游走时/连着我和你&lt;br /&gt;
泊松到来/你却在/痴痴地等待&lt;br /&gt;
马氏链/在轮回中/悄无忆&lt;/p&gt;&lt;p style='text-align: center;'&gt;谁打断了/百年前/启蒙的赌局&lt;br /&gt;
谁把置信/水平定/为廿分之一&lt;br /&gt;
是谁在测度论里&lt;br /&gt;
测着我测不了的概率&lt;/p&gt;&lt;p style='text-align: center;'&gt;山千重水万条&lt;br /&gt;
追寻你足迹&lt;br /&gt;
只因我笃信你&lt;br /&gt;
大数的定律&lt;br /&gt;
每遇见/你的身影/绝世而独立&lt;br /&gt;
我就向远方刻下印记&lt;/p&gt;&lt;p style='text-align: center;'&gt;山千重水万条&lt;br /&gt;
追寻你足迹&lt;br /&gt;
只缘我沉醉你&lt;br /&gt;
时序的遍历&lt;br /&gt;
用时光/换来红尘/滚滚的唯一&lt;br /&gt;
你眼带笑意&lt;/p&gt;&lt;p style='text-align: center;'&gt;回归判别/列联表/方差的分析&lt;br /&gt;
多元世界/隐藏着/太多的秘密&lt;br /&gt;
我用无限/追寻着/一致的估计&lt;br /&gt;
非参数/还这乾坤/秩与序&lt;/p&gt;&lt;p style='text-align: center;'&gt;走遍了你/平滑后/每一条轨迹&lt;br /&gt;
看遍了你/挖掘后/数据的瑰丽&lt;br /&gt;
在随机森林树里&lt;br /&gt;
主成分的投影被隐去&lt;/p&gt;&lt;p style='text-align: center;'&gt;山千重水万条&lt;br /&gt;
追寻你足迹&lt;br /&gt;
只因我笃信你&lt;br /&gt;
大数的定律&lt;br /&gt;
每遇见/你的身影/绝世而独立&lt;br /&gt;
我就向远方刻下印记&lt;/p&gt;&lt;p style='text-align: center;'&gt;山千重水万条&lt;br /&gt;
追寻你足迹&lt;br /&gt;
只缘我沉醉你&lt;br /&gt;
时序的遍历&lt;br /&gt;
用时光/换来红尘/滚滚的唯一&lt;br /&gt;
你眼带笑意……&lt;/p&gt;
&lt;p&gt;嗯，纯属娱乐，文字拙劣也是没办法的事……&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>R会议、animation、安全及其他</title>
   <link href="http://yixuan.github.com/2009/12/r-conf-animation-security-and-others"/>
   <updated>2009-12-14T12:36:33+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/12/r-conf-animation-security-and-others</id>
   <content type="html">&lt;p&gt;第二届中国R语言会议上海会场已经在昨天顺利闭幕，虽然我无法亲临现场，而且现在也还没有看到相关的照片和报道，但我相信一定是extRemely wondeRful的。&lt;/p&gt;

&lt;p&gt;“两会”的召开确实让我们扩展了自己的视野，直接的和间接的受益都非常多。下面说说我的一些意外收获吧。 在北京会场闭幕、上海会场开幕之前的这段时间里，除了整理会后的材料，我还花了些时间研究了一下把应用程序嵌到R中的方法。这源于宫雨老师的演讲以及谢老大为上海会场演讲写的一个幻灯片，里面提到animation包中输出动画的功能依赖于ImageMagick和SWF Tools这两个软件。但因为实际用到的功能只是这两个软件的很小一部分，而且这两个软件的体积都不小，所以希望能从中提取出animation包需要用到的少数几个函数。换句话说，就是把软件打个包，放到animation中去。&lt;/p&gt;

&lt;p&gt;理论上要打包的话，可以直接把那两个软件中要用到的几个exe拷贝到包的目录中，然后在包中写函数调用。但如果这样做，一来是跨平台的特性会大打折扣，二来牵涉到GPL协议中公开源代码的问题，三来是R CMD check中那句checking for executable files着实让人发怵……所以能做的基本上就是把那两个软件的源代码找来，然后分离出有用的源代码来编译。&lt;/p&gt;

&lt;p&gt;有了这个想法后，我就开始拿SWF Tools来做实验。我一开始觉得应该很容易完成，因为无非就是拿源代码来编译嘛，此外为了以防万一，我先不管R，而是直接编译成exe文件试试。可是刚在Code::Blocks（一个开源的C/C++开发集成环境）中按下编译按钮就傻眼了，老是说缺少config.h这个头文件，于是找呀找，却只找到个config.h.in文件。后来才知道，原来这些开源软件大部分都需要先运行configure程序，以解决环境的依赖问题。config.h.in里面有很多“开关”，configure程序就是依照当前环境的各种指标，把这些“开关”打开或关上，然后生成当前环境下的config.h文件。为了明白这一点着实不容易，我先后绝望了好几次，把程序装了又删，删了又装，好在没有完全放弃，否则可能永远也搞不明白了。&lt;/p&gt;

&lt;p&gt;把这个搞明白了只是第一步，后面依然老是出错。兜了几个弯子，才知道编译SWF Tools需要另外两个库，就是JPEG的库和Zlib库。于是又上网搜源代码，调试，杀虫，总之折腾了两三天，好歹能编译成功了，但是接下来又有问题了。SWF Tools的源代码解压开有10M多，加上JPEG库3M，Zlib库2M，如果都放到R包中去也未免太臃肿，所以必须要提取出有用的成份。但是这个过程就太痛苦了，因为你直接看的话很难搞清楚其中的依赖关系，有的时候删一个文件就有几百个编译错误，关系太复杂。好在Code::Blocks提供了一些查询和搜索的工具，又折腾了两天，删掉了N个文件，注释掉了M个函数，最终精简成了现在的2M左右的大小。&lt;/p&gt;

&lt;p&gt;好不容易自信满满准备把程序嵌到R中，才发现灾难又来临了。R是一个跨平台的软件，编写的程序包也应该尽量满足这个特性。但是我经常发现Windows下配置好的源代码放到Linux下无法编译，Linux下配置好了Windows又不行了，所以没办法，还得把configure脚本学一学，于是上网搜了半天，知道要先用autoscan生成configure.ac，然后用auroheader生成config.h.in，最后用autoconf生成configure什么的。而直到现在，依然有很多问题没有解决，比如R需要另外生成一个configure.win文件，用来在Windows下进行配置，但是我在网上没有找到什么文献，所以只能作罢。&lt;/p&gt;

&lt;p&gt;记得老大之前说过一句话，就是程序员和网页设计者最抓狂的事就是要面向不同的平台编写不同的代码，这几天也实在是被跨平台的问题折磨得不轻。不过好在这几天趁机把C语言又学习了一番，而且还了解到更多的与GNU有关的内容，算是意外的收获吧。目前的成果是把SWF Tools中的&lt;code&gt;jpeg2swf&lt;/code&gt;和&lt;code&gt;png2swf&lt;/code&gt;两个程序放到了animation包中，在R中是&lt;code&gt;sth2swf()&lt;/code&gt;这个函数，当然还没写说明文档什么的（&lt;a href='http://cos.name/bbs/read.php?tid=17472'&gt;老大要笑了&lt;/a&gt;:)），可以到&lt;a href='http://yixuan.cos.name/cn/2009/12/enhanced-animation-package/'&gt;http://yixuan.cos.name/cn/2009/12/enhanced-animation-package/&lt;/a&gt;去下载，里面给了示例的代码。当然这个东西还非常初级，需要很多进一步的工作，等&lt;a href='http://yanlinlin82.vicp.net/blog/'&gt;yanlinlin&lt;/a&gt;忙完了一定要好好跟他取取经。如果真的能把这块东西搞定了，那老大的animation包的实用性肯定会有很大提升的。&lt;/p&gt;

&lt;p&gt;而做到这一步我又不禁想起&lt;a href='http://www.road2stat.com/'&gt;肖楠&lt;/a&gt;对于R环境安全的演讲。试想，既然这些工具可以嵌入到R中，那么恶意程序岂不是也可以进行类似的操作？而且把恶意代码写成C并编译的话，就更加难以被人发现了，毕竟读一段C代码一般要比读一段R代码更难。前两天COS被一些不速之客光临过了，这也让我们不得不审视一下当前网络的安全问题，攻防之战依然在继续啊。&lt;/p&gt;

&lt;p&gt;附：&lt;code&gt;sth2swf()&lt;/code&gt;的说明。&lt;br /&gt;&lt;code&gt;sth2swf(from, cmdargs)&lt;/code&gt;有两个参数，from可以取“jpeg”和“png”，说明你是要将什么格式的文件转成swf；cmdargs是命令行参数，参见SWF Tools的&lt;a href='http://wiki.swftools.org/index.php/Main_Page'&gt;官方说明&lt;/a&gt;。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>增强版animation包</title>
   <link href="http://yixuan.github.com/2009/12/enhanced-animation-package"/>
   <updated>2009-12-14T00:12:24+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/12/enhanced-animation-package</id>
   <content type="html">&lt;p&gt;本来想把东西整理一下再发上来的，但是忍不住要跟大家分享一下。今天太累了，先把东西放上吧，等明天再把相关的说明加上。&lt;/p&gt;

&lt;p&gt;源码包：&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2009/12/animation_1.0-10.tar.gz'&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;编译包：&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2009/12/animation_1.0-10.zip'&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;示例代码：&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2009/12/rcode.7z'&gt;下载&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;补记：相关说明参见&lt;a href='http://yixuan.cos.name/cn/2009/12/r-conf-animation-security-and-others/'&gt;这里&lt;/a&gt;。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>社区和火炬</title>
   <link href="http://yixuan.github.com/2009/12/community-and-torch"/>
   <updated>2009-12-07T09:45:48+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/12/community-and-torch</id>
   <content type="html">&lt;p&gt;原本以为今天可以倒头便睡，让过热的大脑充分休息一下，结果最后竟然有点失眠，无奈之下打开电脑，把今天的一些感想记录下来。&lt;/p&gt;

&lt;p&gt;今天和不少高人都有一些交谈，其中有两个话题是我印象非常深刻的。首先是早上的牟先生，牟先生非常热心，他原本是去上海那边听报告的，这几天正好到北京办事，第一天下午就赶到了会场听演讲。特别值得一提的是，在当初统计之都进行捐赠的时候，正是他的一笔援助填满了1500元的捐赠目标。&lt;/p&gt;

&lt;p&gt;今天牟先生依然来到了会场，我们聊到了R会议的组织问题。牟先生谈及了自己的一些经验，他说他在上海经常参加一些Linux社区的活动，形式上跟R会议非常类似，都属于开源软件使用者自发举行的集会，而且他还说这种现象在开源软件中非常普遍，而商业软件则较少有这种自发的活动。&lt;/p&gt;

&lt;p&gt;但是他也提及了这种会议一个常见的问题，那就是第一届第二届都好办，而越往后，办成功的难度就会越大。牟先生的建议就是说，这种会议最好要有一个相对固定的组织者和领导者，因为这样可以既保证“老人”不流失，又可以吸引更多的新人；如果每次都换一个班子，那么原来建立起来的联系就有可能断裂，甚至流失的速度还要快于流入的速度。他还举了一个例子，说是有个社区的领头人，本身有自己的工作，而且非常忙，但是主持会议坚持了十年，非常不容易。&lt;/p&gt;

&lt;p&gt;其实这也是一个很现实的问题。就拿第一届与第二届的对比而言，第一届是报名130人，实到150人，而这次是报名150人，实到不足130人。要知道，第一届的很多人可是慕名而来（当时我们班几个人去那儿也有这方面的因素），而这一次则缺少了这方面的优势，这是我们原来一直担心的问题。&lt;/p&gt;

&lt;p&gt;此外我记得很早的时候COS上有个帖子，是有人问老大，如果你毕业了，工作了，还有热情去维护这个网站吗？这一问其实是很犀利的。就我们这群人而言，很多东西确实是靠热情来维持的，但为了R会议以及COS的长远发展，我们似乎也应该有所反思，去构建一条更加牢固的、能连结更多人的纽带。现在想想，老大让我们读《管子·形势第二》，读管理学，实在是很有远见的。&lt;/p&gt;

&lt;p&gt;而另一个话题是与刘思喆师兄展开的，我们聊到了一种学术氛围的传承问题。依然是一个不容乐观的现象，中南的三位师弟远道而来为我么讲经，但反观人大统计，虽然报名不少，但实际到场的却只有少数几人（当然这几位师弟师妹据我所知都是非常优秀的）。刘师兄跟我说，我们能创造出像R语言会议这样的一种氛围和环境是相当不容易的，但是我们本院的同学却似乎没有意识到这一点，这是非常可惜的。我与太云聊天的时候也说，中南的三位师弟非常有“革命精神”，而人大则过得太安逸了。&lt;/p&gt;

&lt;p&gt;居安思危。这次R会议三位大二的中南师弟给我留下了非常深的印象。回想我们当时大二的情况，感觉就是天壤之别。当我们还在沉迷于书本的时候，他们三位已经成了富有热情和志向的学术青年；当我们还在对分数和考试耿耿于怀的时候，他们已经对这些东西有了完全不一样的心态；当我们还在为未来踌躇不已的时候，他们已经看到了更为广阔的一片天空。&lt;/p&gt;

&lt;p&gt;我想谢老大和刘师兄之所以被我们所尊敬，很大一部分程度上是因为他们时刻在想着怎样为后来的人提供一个更好的平台，怎样把自己的经验和教训一代代传递下去。这种责任感和使命感就是一支火炬，不断启蒙（enlighten）着一代又一代的人。&lt;/p&gt;

&lt;p&gt;火炬既然已经传到了我们的手中，就不再有停下的理由。三位师弟临走的时候，我送了一本《女士品茶》给他们，并在扉页上写着：“愿知识的火炬，代代相传，生生不息！”&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>一点随感</title>
   <link href="http://yixuan.github.com/2009/12/some-feelings"/>
   <updated>2009-12-05T21:46:33+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/12/some-feelings</id>
   <content type="html">&lt;p&gt;不容易，真不容易，说真的，我都不知道怎么形容现在的心情了。&lt;/p&gt;

&lt;p&gt;可能大家不相信，今天开完会回到寝室，看到&lt;a href='http://yihui.name/cn/2009/12/snow-in-ames-and-2nd-chinese-r-conference/'&gt;谢老大写的日志&lt;/a&gt;，我真的快哭出来了。不怕大家笑话，我在打这些字的时候眼睛都是湿的。 感激，除了感激还是感激。&lt;/p&gt;

&lt;p&gt;在刚才过去的两分钟内，我对我自己说，如果没有去年的第一届R会议，我可能永远也不会结识老大、太云、陈堰平师兄、刘思喆师兄和奚潭这些人，永远不会加入到COS这个团体中，永远不会接触到因为这些人和COS而认识的范师兄、钟老师、胡大哥、颜林林、中南三剑客、陈丽云，等等等等。如果是这样，我现在可能还躲在某个灰暗的角落，想着一些毫无意义却又萦绕身心的困惑。 知遇之恩，此生难报。&lt;/p&gt;

&lt;p&gt;只是当初一个小小的选择，竟让我完全踏进了另一个世界。一年，只是一年，一年可以让一个人改变太多。今天和颜林林、钟老师、胡大哥、刘师兄的相见，完全像是遇到了久识的朋友，丝毫没有意识到那不过是几个月前的事。&lt;/p&gt;

&lt;p&gt;几位一起组织会议的师兄和同学可能觉得我总是紧张兮兮的。我承认这是我的弱点，但我没有理由让自己不这样做。我想做任何事，只要有种力量会推动你一直前进，你也必然不会给自己找一个休息的理由。欧·亨利的小说中有一句话，&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;em&gt;When one loves one&amp;#8217;s Art, no service seems too hard.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;对于老大、R和COS的感恩，已然不是我自己所能控制的了。&lt;/p&gt;

&lt;p&gt;准备会议确实很累，但是回想起和中南师弟的拥抱，回想起和钟老师的握手，回想起和大家的谈笑，我真的没有任何理由再去抱怨，我坚信我所得到的要比我所付出的多出许多。&lt;/p&gt;

&lt;p&gt;要感谢所有前来参会的朋友，尤其要感谢大洋彼岸的吴老师和谢老大。他们留给我们的，真的远不止是一门语言和一届会议而已。正如陈师兄在今天致辞时所提，吃水不忘挖井人，没有这些先驱们的杰出贡献，何来我们今天的欢聚一堂？&lt;/p&gt;

&lt;p&gt;出去散步回来，稍有缺憾的月色投下一丝伤感。顿时有种感觉，像是在挂念远在他乡的兄长。&lt;/p&gt;

&lt;p&gt;此时此夜，且让我做一回，风雪夜归人。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>做神曾经做过的事</title>
   <link href="http://yixuan.github.com/2009/11/do-what-god-has-done"/>
   <updated>2009-11-27T09:53:26+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/11/do-what-god-has-done</id>
   <content type="html">&lt;p&gt;第二届R会议马上就要开了，而我们这边的工作还有很多需要完善的。我们六七个人一起做都乱成这样，真的很难想像老大去年是怎么以一人之力就能把大会开展得井井有条的……&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>预测强度及其在聚类分析中的应用</title>
   <link href="http://yixuan.github.com/2009/11/prediction-strength-and-its-application-in-clustering"/>
   <updated>2009-11-08T21:16:06+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/11/prediction-strength-and-its-application-in-clustering</id>
   <content type="html">&lt;p&gt;打了一个草稿，先发到这里吧，等修改好了就往COS主站上发一份。:)&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;聚类分析的广泛应用想必不用多说，但大家在做聚类的时候可能经常会遇到一个比较头疼的问题，那就是聚类数的选择。聚类数的选择其实很有讲究：太少了，可能样本点不能很好地区分开来；太多了，结果又往往不好解释。因此聚类数的选择其实是一个很重要的问题。 但是在实际情形中，聚类数的选择又经常显得比较主观，我们可能会说，“依据这个问题的实际意义，应该聚成××类”，但是这样容易造成一个后果，就是甲说甲有理，乙说乙有理，孰是孰非难以分辨。 或者我们会采用层次聚类法，因为它不需要事先对聚类数进行指定，但面对那一棵繁茂倒长的树，我们手中的剪刀可能依然是无从下手。 而像k-means这样的聚类方法就更不用说了，k是必须要事先指定好的，否则连聚类的过程都完成不了。&lt;/p&gt;

&lt;p&gt;于是我们很自然地要提出这样一个问题：有没有这样一种方法，能为我们聚类数的确定提供一些理论上的依据？关于这一点，也许已经有很多人给出过他们的建议，而本文要为大家介绍的是Tibshirani等大牛们于2001年提出的一种基于“预测强度”的确定聚类数的方法。文章的原文请点击&lt;a href='http://www-stat.stanford.edu/~tibs/ftp/predstr.ps'&gt;这里&lt;/a&gt;，注意这是ps格式的，可能需要用GSview之类的工具打开。本文所讲的大概只是文章的小部分内容，有兴趣的读者可以仔细研究一下那篇文章。&lt;/p&gt;

&lt;h3 id='id345'&gt;一、预测强度的思想&lt;/h3&gt;

&lt;p&gt;预测强度的表达是一大串数学符号，为了直观地说明它的含义，我们先来思考一个问题：&lt;strong&gt;什么样的聚类是一个好的聚类&lt;/strong&gt;？如果我们回答了这个问题，而且可以把聚类的效果表达成聚类数k的函数，那么聚类数的选取其实就变成一个最优化的过程了。&lt;/p&gt;

&lt;p&gt;对于这个问题，不同的人会有不同的回答，但大体的想法应该差不多，就是希望聚类的结果能&lt;strong&gt;将样本点尽可能地分开&lt;/strong&gt;。事实上，聚类的过程就是围绕这个思想而来的。我们一般认为，类与类之间的距离越远，它们分得也就越开，于是我们就定义了点与点的距离，点与类的距离，类与类的距离，然后以此为依据将类分开。&lt;/p&gt;

&lt;p&gt;但是我们其实可以换一种思路，那就是用分类的思想去理解聚类。众所周知，分类和聚类一个是有监督一个是无监督，但它们并不是完全没有联系。试想，当一个数据集进行聚类之后，它就自然而然地具有了分类的能力，换句话说，拿一批新的样品过来，原来的数据就可以对新数据进行分类，于是新数据就可以得到一列记录了每个样品分类的编号（假定叫编号1）。另一方面，新的数据自身也可以进行聚类，也可以得到一个分类编号（假定叫编号2），那么编号1和编号2之间是否一致就决定了聚类的结果是否具有可预测性。我们之前说的要将样本点尽可能地分开，其实就是希望&lt;strong&gt;聚类结果能对新样本进行准确而良好的预测&lt;/strong&gt;，这正是预测强度方法最核心的思想，也是“预测强度”名称的由来。&lt;/p&gt;

&lt;h3 id='id346'&gt;二、预测强度的计算&lt;/h3&gt;

&lt;p&gt;说到预测的能力，也许大家会很自然地想到分类器的误分率。不错，被正确预测的样品的比例是判断分类器预测能力的一个重要指标，但是如果出现下面的情形：有5个新样本点，自身聚类的编号分别是1，1，1，2，2，而用已有数据判别的结果是2，2，2，1，1，如果直接拿它们进行对比的话，判对率是0，但实际上，这两组编号应该是完全吻合的。其中的原因就在于，聚类的编号其实是无序的，是可以任意调换的，如果我们要测量两组编号的吻合性，就需要消除其中序的概念。&lt;/p&gt;

&lt;p&gt;关于这个问题的解决后面会提及，现在还是从预测强度的计算着手。拿到一批数据，首先将其随机划分为训练集和测试集，然后分别对这两组数进行聚类（按需要选定一种聚类方法，并先假设聚类数k是已知的），这样训练集和测试集就分别得到了一列类别编号（记为trainID和testID1）。接下来用训练集及其编号对测试集进行判别，于是测试集就获得了第二列编号（记为testID2）。下面的工作就是衡量testID1和testID2之间的一致性程度。&lt;/p&gt;

&lt;p&gt;预测强度的做法是，先考虑testID1里面的每一个类，比如编号为1的所有样品，如果它们一共有n_k1个（k是总的聚类数），那么它们的两两配对就有n_k1(n_k1-1)/2种；接下来就考察每一种配对下，这两个样品是否在testID2中也被分在同一个组；计算出那些在testID2中也被分在同一组的配对所占的比例，然后重复这个过程，对所有的k个类都计算出相应的值；最后对这k个数值取最小值，就是当前聚类数k下的预测强度。&lt;/p&gt;

&lt;p&gt;用一张流程图来说明，就是：&lt;/p&gt;

&lt;p&gt;&lt;img alt='flowchart' src='http://yixuan.cos.name/cn/wp-content/uploads/2009/11/flowchart.png' /&gt;&lt;/p&gt;

&lt;p&gt;再举一个直观的例子。假设有一批新样品，自身聚类的编号是&lt;/p&gt;
&lt;table align='center' border='1'&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td width='37' valign='middle'&gt;X1&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X2&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X3&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X4&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X5&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X6&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X7&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X8&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X9&lt;/td&gt;
&lt;td width='39' valign='middle'&gt;X10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width='37' valign='middle'&gt;1&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;1&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;1&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;1&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;1&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;1&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;2&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;2&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;2&lt;/td&gt;
&lt;td width='39' valign='middle'&gt;2&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;被判别的编号是&lt;/p&gt;
&lt;table align='center' border='1'&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td width='37' valign='middle'&gt;X1&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X2&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X3&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X4&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X5&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X6&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X7&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X8&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X9&lt;/td&gt;
&lt;td width='39' colspan='2' valign='middle'&gt;X10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width='37' valign='middle'&gt;1&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;1&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;2&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;1&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;1&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;2&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;2&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;2&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;2&lt;/td&gt;
&lt;td width='39' valign='middle'&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;那么，对于自身聚类中的第1个类，可以作出下面的这个矩阵：&lt;/p&gt;
&lt;table align='center' border='1'&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X1&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X2&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X3&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X4&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X5&lt;/td&gt;
&lt;td width='39' valign='middle'&gt;X6&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width='37' valign='top'&gt;X1&lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt;1&lt;/td&gt;
&lt;td width='37' valign='top'&gt;0&lt;/td&gt;
&lt;td width='37' valign='top'&gt;1&lt;/td&gt;
&lt;td width='37' valign='top'&gt;1&lt;/td&gt;
&lt;td width='39' valign='top'&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width='37' valign='top'&gt;X2&lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt;0&lt;/td&gt;
&lt;td width='37' valign='top'&gt;1&lt;/td&gt;
&lt;td width='37' valign='top'&gt;1&lt;/td&gt;
&lt;td width='39' valign='top'&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width='37' valign='top'&gt;X3&lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt;0&lt;/td&gt;
&lt;td width='37' valign='top'&gt;0&lt;/td&gt;
&lt;td width='39' valign='top'&gt;1&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width='37' valign='top'&gt;X4&lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt;1&lt;/td&gt;
&lt;td width='39' valign='top'&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width='37' valign='top'&gt;X5&lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='39' valign='top'&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width='37' valign='top'&gt;X6&lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='39' valign='top'&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;其中如果两个点在判别编号中也一样，就记为1，否则就记为0。于是很容易得出判对的比例是7/15。&lt;/p&gt;

&lt;p&gt;同理，另一个类别的矩阵是&lt;/p&gt;
&lt;table align='center' border='1'&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td width='39' valign='top'&gt; &lt;/td&gt;
&lt;td width='36' valign='middle'&gt;X7&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X8&lt;/td&gt;
&lt;td width='37' valign='middle'&gt;X9&lt;/td&gt;
&lt;td width='40' valign='middle'&gt;X10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width='39' valign='top'&gt;X7&lt;/td&gt;
&lt;td width='36' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt;1&lt;/td&gt;
&lt;td width='37' valign='top'&gt;1&lt;/td&gt;
&lt;td width='40' valign='top'&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width='39' valign='top'&gt;X8&lt;/td&gt;
&lt;td width='36' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt;1&lt;/td&gt;
&lt;td width='40' valign='top'&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width='39' valign='top'&gt;X9&lt;/td&gt;
&lt;td width='36' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='40' valign='top'&gt;0&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td width='39' valign='top'&gt;X10&lt;/td&gt;
&lt;td width='36' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='37' valign='top'&gt; &lt;/td&gt;
&lt;td width='40' valign='top'&gt; &lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;比例为3/6=1/2。于是，当前聚类数2下的预测强度就是7/15和1/2中的最小值，即7/15。&lt;/p&gt;

&lt;h3 id='id347'&gt;三、预测强度的应用&lt;/h3&gt;

&lt;p&gt;有了上面的思想和计算方法，预测强度的应用就很直接了。就拿确定聚类数来说，我们只要算出各个聚类数下的预测强度，然后找出其中的最大值对应的k就可以了。 举一个原文中的例子，下图是作者做的三个模拟实验，其中左边的三幅图表示实际处理的三组数据，右边是对应的预测强度计算结果。在右边的图中，横轴表示尝试使用的聚类数，纵轴是每一个聚类数下的预测强度，将这些点连成图线，就可以直观地看出预测强度随聚类数的变化情况。 &lt;img alt='ps_k' src='http://yixuan.cos.name/cn/wp-content/uploads/2009/11/ps_k.png' /&gt; 从右边第一幅图可以看出，预测强度在k&amp;gt;1时都比较小，尚不足70%，说明聚类数在大于1时表现都不太良好，这正好与左图反映的情况是一致的——数据本身就十分混杂，应该只有一类； 而右边第二幅和第三幅图分别在k=2和k=3时达到了高峰，这与左图反映的数据形态也是完全吻合的。&lt;/p&gt;

&lt;p&gt;在上述的例子中，预测强度为我们找到了“最正确”的聚类数，但这毕竟是模拟的结果。在实际应用的过程中，有以下几个问题还需要考虑一番：&lt;/p&gt;

&lt;h4 id='1'&gt;1、交叉验证&lt;/h4&gt;

&lt;p&gt;在计算预测强度的过程中，我们需要对数据进行随机划分，而这种带有随机性的算法我们最担心的就是结果的稳定性。如果我们手头上的数据量比较大的话，其实可以采用交叉验证的方式，比如把数据随机等分成5份，每一次从中取出一份作为测试集，其余的为训练集，然后计算出一个预测强度；重复这个步骤，直到每一份都轮了一遍，这样总共就算出了5个数值；对这5个数取平均，就是用5折交叉验证得出的平均预测强度。&lt;/p&gt;

&lt;h4 id='2k1'&gt;2、k=1时的预测强度&lt;/h4&gt;

&lt;p&gt;这是一个值得思考的问题，因为事实上，当k=1，即数据只聚成一类时，预测强度是恒为1的。原因很简单，那就是因为，只要是聚成一类，那么所有的样本点都会落在同一个类中，因此没有任何一个配对会被错判。但是此时，我们并不能说聚类数为1时就一定是最好的——如果真是这样的话，聚类还有什么意义呢？&lt;/p&gt;

&lt;p&gt;所以这时候，我们就不能单纯地用最优化的思想去看待这个问题。我们应该首先看k&amp;gt;1时预测强度大致的取值，如果取值都比较小，那么我们也许可以认为这个数据本身就比较混杂，不适合做聚类，即承认k=1；而如果在某个聚类数k_0&amp;gt;1上预测强度达到了0.8、0.9这样的水平，那也许我们还是应该认为数据是有聚类的必要的。&lt;/p&gt;

&lt;p&gt;从之前的图中我们也可以得到一些启发：第一幅图的预测强度在k&amp;gt;1时就“一蹶不振”了，而后面两幅都在某个大于1的位置上有了一个接近于1的取值（在这个比较理想的模拟条件下其实就是等于1了），因此我们认为第一组数据应该聚成一类，而第二、第三组数据分别聚成两类和三类。&lt;/p&gt;

&lt;h4 id='3'&gt;3、聚类和分类方法的选择&lt;/h4&gt;

&lt;p&gt;在计算预测强度的过程中聚类算法和分类算法都有所涉及，但文章的原文中并没有太多地涉及相应方法的选择。我个人认为，选择什么样的聚类和分类方法主要取决于数据的特点。如果数据量比较大，可能层次聚类法算起来就比较困难，这时可以用k-means等方法；而至于分类，也可以用一些比较快速的基于距离的判别法，比如LDA、QDA等。但总的来说，方法的选取还是相对自由和宽松的。&lt;/p&gt;

&lt;h3 id='id348'&gt;四、一些思考&lt;/h3&gt;

&lt;p&gt;在文章的原文中，作者只是用预测强度来选择合适的聚类数，但是回到之前提出的那个问题，当我们把预测强度也作为衡量聚类效果好坏的一个标准的时候，被优化的因素按理就可以变得更多了。比如说，变量的选择也可以被纳入到优化的框架中，因为在分类的时候，并不是变量越多预测的效果就越好。于是，我们可以将聚类数和变量子集进行二维的优化，来得到各自最优的取值。&lt;/p&gt;

&lt;p&gt;最后总结一下，预测强度其实就是把分类的思想应用到聚类之中，以预测的能力作为聚类效果好坏的标准，进而以这个标准来选取最佳的聚类数或其它的影响因素。但还是那句话，任何一种统计方法都有其适用的范围，实际使用的过程中，可能并不总能得到很好的结果，这时就还需要对数据本身进行更深入的认识，才能得出可靠的结论。&lt;/p&gt;

&lt;p&gt;附：计算预测强度的R代码，供参考。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;psk=function(train,test,k)
{
    cl.train=kmeans(train,k)$cluster;
    cl.test=kmeans(test,k)$cluster;
    n=table(cl.test);
    library(MASS);
    train=cbind(as.data.frame(train),cl=cl.train);
    lda.model=lda(cl~.,data=train);
    cl.test.pred=predict(lda.model,test)$class;

    if(is.vector(test)) test=as.matrix(test,ncol=1);
    ps=numeric(k);
    for(i in 1:k)
    {
        index=(1:dim(test)[1])[cl.test==i];
        pred=cl.test.pred[index];
        ps[i]=(sum(outer(pred,pred,&amp;quot;==&amp;quot;))-n[i])/n[i]/(n[i]-1);
    }
    return(min(ps));
}&lt;/code&gt;&lt;/pre&gt;</content>
 </entry>
 
 <entry>
   <title>别了，sinα</title>
   <link href="http://yixuan.github.com/2009/11/farewell-sina"/>
   <updated>2009-11-06T19:55:51+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/11/farewell-sina</id>
   <content type="html">&lt;p&gt;走之前用这里的电脑留个记号吧。&lt;/p&gt;

&lt;p&gt; &lt;/p&gt;

&lt;p&gt;补记：回到寝室了，在sinα的实习也算是告一段落了，干脆就在这里总结一下这一段时间的经历和感受好了。&lt;/p&gt;

&lt;p&gt;首先要说的当然还是那些被无数人实践过的结果：&lt;/p&gt;

&lt;p&gt;企业和学校是不同的；&lt;br /&gt;职员和学生是不同的；&lt;br /&gt;报告和论文是不同的。&lt;/p&gt;

&lt;p&gt;不过虽然是陈词，但应该还不算是滥调，因为毕竟是自己亲身经历的，总好过凭空的想像。&lt;/p&gt;

&lt;p&gt;在那边的工作基本上划分为两块，老师和那边的合作项目，以及sinα日常的一些事务。合作项目就不用说了，主要是数据的处理，收获还是很大的，毕竟是真真正正的数据啊。在这个项目中学到了用Prediction Strength来确定聚类数的方法，我还在想是不是可以给主站投一稿呢。结果有可能不能公开，但至少可以介绍一下方法吧。&lt;/p&gt;

&lt;p&gt;其实真正想说的是日常的事务，尽管从“技术含量”上看远不如前者。当时几乎每天要做的工作就是定时更新几张Excel表格，里面是一些从网站上获取的数据，包括每天要更新的，每周要更新的，还有每月要更新的。而每天的操作，基本上就是Ctrl+C/Ctrl+V或者如某著名饼干产品广告说的，“框一框，拖一拖，填一填”。曾经有那么几个下午，由于实在太困，大脑几乎失去了意识，但手中的鼠标还在指定的位置进行着指定的操作，而正因为这个，我才体会到卓别林的《摩登时代》可能真的不只是一部电影。&lt;/p&gt;

&lt;p&gt;后来，十一假期的时候，为了能够摆脱这样的处境，能够进一步解放生产力、发展生产力，我再一次向Mr. R求救。由于其中的几个网站是公开的，所以可以通过读取源代码的方式来抓取需要的信息，用到的函数主要是&lt;code&gt;readLines(url())&lt;/code&gt;和一些正则表达式。等十一之后正式投入使用时，效果确实十分明显，原来要一个小时的工作，那时就只要十来分钟就行了。&lt;/p&gt;

&lt;p&gt;当然了，Mr. R肯定不能只在这种地方发挥作用。之前提到的那个合作项目，里面的结果基本上都是用R跑出来的。当时我跟我的主管说，这个方法太新，ABAA没有办法算，所以我就用R软件了。而他们也没有像传闻那样，听到是开源免费的就一副紧张的样子。事实上，在我用过的两台电脑里面，都已经装上了R软件，版本都是2.9以上的。这离不开PLF和暑假里面几位师兄的功劳啊。 今天要走的时候，主管还特意吩咐我，给后面来实习的人写一份自动获取数据程序的说明文档。看样子，Mr. R是要继续在那里工作一段时间了。&lt;/p&gt;

&lt;p&gt;所以呢，我有一些想法：&lt;/p&gt;

&lt;p&gt;1. 商业公司不是坚决不用开源软件，关键是要有人推广；&lt;br /&gt;2. 要推广开源软件，就要找到它们相对于商业软件的优势；&lt;br /&gt;3. 我们其实每天都在享受开源作者的劳动果实，比如很多网站的后台，还有你吃到的“正宗宫保鸡丁”的配料。&lt;/p&gt;

&lt;p&gt;俗话说，一波未平，一波又起。好在现在sin这一波已经平息了，接下来，我得多花点心思到COS这一波吧……&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>十一月的雪</title>
   <link href="http://yixuan.github.com/2009/11/snow-in-november"/>
   <updated>2009-11-01T16:13:39+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/11/snow-in-november</id>
   <content type="html">&lt;p&gt;如果说昨天还是落叶萧萧的深秋，那么今天就算是风雪连天的寒冬了。十一月的第一天下这么大的雪，别说是在家里了，就算是在北京我之前也没遇到过啊……&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2009/11/IMG_3046.JPG'&gt;&lt;img alt='IMG_3046' src='http://yixuan.cos.name/cn/wp-content/uploads/2009/11/IMG_3046-300x225.jpg' /&gt;&lt;/a&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2009/11/IMG_3048.JPG'&gt;&lt;img alt='IMG_3048' src='http://yixuan.cos.name/cn/wp-content/uploads/2009/11/IMG_3048-300x225.jpg' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;补记：晚上妈妈发来短信，说到科学巨星陨落和北京骤降大雪是否有必然联系，我顿时一阵恍然。我们的后人如果读到这一段历史，他们的感觉或许就和我们读到古时历史人物那些奇特的经历一样，认为这不过是史家的夸张修饰而已。后人叹之而不信之，亦使后人而复叹后人也。可是这又有什么关系呢，我们的后人会知道，我们曾经因为这样的一批人物而自豪过，而感动过，是否是冥冥天意，又何妨把它作为对一代巨匠的深沉纪念呢？&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>感冒了</title>
   <link href="http://yixuan.github.com/2009/10/caught-a-cold"/>
   <updated>2009-10-24T22:53:19+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/10/caught-a-cold</id>
   <content type="html">&lt;p&gt;不知道是感冒了还是被感冒了，反正总而言之是感冒了，而且感冒的还是一大片。恰巧最近又在做k-means，于是满脑子都在想最初的那几个点是谁，谁和谁离得比较近，谁被谁归成一类了——这样子什么时候能收敛到头啊。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>有点累了</title>
   <link href="http://yixuan.github.com/2009/10/feeling-tired"/>
   <updated>2009-10-20T10:56:56+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/10/feeling-tired</id>
   <content type="html">&lt;p&gt;有点累了，而且这种累跟忙碌是不一样的感觉。&lt;/p&gt;

&lt;p&gt;最近事情很多很杂，但是完成度都是百分之七八十，没有一样是满意的，这种感觉非常让人崩溃。看上去好像过得很充实，其实只不过是在随机游走中一点一点地消磨时光。&lt;/p&gt;

&lt;p&gt;还是心态问题吧，一个人不可能同时做很多事情，没有舍弃就没有获得。就算是那些被我们称为神一样的人，我相信他们在自己的世界中，依然有着很多艰难的抉择。&lt;/p&gt;

&lt;p&gt;日常的课程和作业，精算考试，COS的例行事务，新浪网的报告，数据挖掘小组，学院网站，软件界面，学委的工作，帮师弟师妹解答R的问题。单独提出其中的任何一个都是我应该做的或我感兴趣做的，甚至我都有信心和耐心去做到最好，但是堆积在一起才发现这是多么恐怖的事情。我觉得如果我继续以这样的状态运行，也许每一件事情都做不好，那岂不是更加愧对这些人和事了？我需要放弃一些东西吗？&lt;/p&gt;

&lt;p&gt;可是想到这里，我又发现自己其实太过简单。或许这些事情只是某个高于我的存在给我的一种试炼？如果连这些事都应付不过来，那以后如何面对更加复杂的现实呢？想到这里，我不禁哑然失笑，当神人们在Keep on Fighting!的时候，我居然还妄图什么“怡然”，这是不是我自己对自己的一个最好的讽刺呢？ 我更加迷惘了吗？&lt;/p&gt;

&lt;p&gt;或许，此时我需要神，或者像神一样的人，或者只是单纯的朋友的几句忠告吧。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>被一道概率题玩弄了</title>
   <link href="http://yixuan.github.com/2009/10/probability-played-a-trick-on-me"/>
   <updated>2009-10-15T20:30:24+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/10/probability-played-a-trick-on-me</id>
   <content type="html">&lt;p&gt;今天彻底被一道题目玩弄了。题目是这样的：&lt;/p&gt;

&lt;p&gt;某国家为了限制人口增长而实行计划生育，即一对夫妻只能生一胎，但这个国家的人普遍重男轻女，于是经常会有“偷生”的行为，比如一对夫妻一定要生出一个男孩才满意，否则就一直生。假定这个国家原来的男女比例是1：1，问若干年后（还没有第三代），其性别比例会有什么变化。&lt;/p&gt;

&lt;p&gt;说实话吧，我看到这段陈述后我的第一反应就是，这不是赤果果地影射C国吗？当然是男的多了。但是计算一下才知道出问题了，最简单的办法就是用几何分布。如果认为生女孩是“失败”（嗯嗯，这里的失败是概率里面经常说的那个失败啊，我可不敢说是通常意义上的那个啊！！！），那么每家的孩子数就服从p=0.5的几何分布，均值为2，由于最后一胎一定是男孩，所以每家平均会有一个女孩，so……比例当然是不变了。&lt;/p&gt;

&lt;p&gt;今天丢人了，以后再也不说自己是统计学院出来的……&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>虚惊一场</title>
   <link href="http://yixuan.github.com/2009/10/a-false-alarm"/>
   <updated>2009-10-08T00:14:22+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/10/a-false-alarm</id>
   <content type="html">&lt;p&gt;今天练习了一下利用phpMyAdmin来导入导出WP的数据，结果执行之后发现中文全变成了问号，当时想肯定是编码的问题。检查了一下导出的sql文件，发现里面确实有很多乱码，但是GB2312、GBK、UTF-8都试了一遍，乱码依旧存在。仔细一看发现，原来导出的sql文件是用两种编码写出来的，phpMyAdmin的工作编码是GB2312，但WP存储的数据是UTF-8，所以不管用GB2312编码还是用UTF-8，总会有乱码存在。这种情况之前没遇到过，所以只好用傻办法，轮换更改编码，把显示正确的内容粘到另一个文本文件中，最后保存为UTF-8。&lt;/p&gt;

&lt;p&gt;然而问题依然存在，当我把显示正确的sql文件导入到phpMyAdmin中时，中文仍然会变成问号。在导入的时候可以选择导入文件的字符编码，但我试了很多个，问题还是没有解决。后来到网上搜了一下才知道，phpMyAdmin会把新建数据库的字符集设定为latin1_swedish_ci（估计程序的编写者是瑞典人），在之前导出的sql文件中，包含了新建数据库的命令，因此数据库也就成了latin1_swedish_ci编码，这时再读取中文，自然就变成问号了，并且之后再怎么修改编码也于事无补。换言之，在用phpMyAdmin导入sql文件时，界面中要你指定的字符集与数据库实际的字符集是两个完全独立的概念。找了一些资料后，目前惟一（感觉是）的解决办法是预先在phpMyAdmin中建好相应的数据库，设定好字符集，再用phpMyAdmin的导入功能将数据库进行填充。不过这时要注意的是在sql文件中需要把CREATE DATABASE命令删掉，否则导入时就会提示数据库已经存在而无法导入。&lt;/p&gt;

&lt;p&gt;总而言之，在用Ubuntu时，有两样东西我是很害怕的，那就是编码和字体……&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>原来我是山寨……</title>
   <link href="http://yixuan.github.com/2009/10/i-turn-out-to-be-shanzhai"/>
   <updated>2009-10-07T00:22:59+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/10/i-turn-out-to-be-shanzhai</id>
   <content type="html">&lt;p&gt;&lt;a href='http://www.yiranxuan.com/'&gt;http://www.yiranxuan.com/&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;看看人家这域名，人家这专业，唉，丢人喽……&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>我的中国心®</title>
   <link href="http://yixuan.github.com/2009/10/my-heart-for-china"/>
   <updated>2009-10-06T18:29:19+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/10/my-heart-for-china</id>
   <content type="html">&lt;p&gt;国庆那天ID为微微的朋友在&lt;a href='http://cos.name'&gt;COS论坛&lt;/a&gt;的R版发了一个帖子，名叫“&lt;a href='http://cos.name/bbs/read.php?tid=16743'&gt;灌灌水庆庆生&lt;/a&gt;”，里面是用随机点图描绘的一幅漂亮的中国心。当时突然想起来以前在百度贴吧看到的&lt;a href='http://tieba.baidu.com/f?ct=335675392&amp;amp;tn=baiduPostBrowser&amp;amp;sc=5137217861&amp;amp;z=511497934&amp;amp;pn=0&amp;amp;rn=30&amp;amp;lm=0&amp;amp;word=%CA%FD%D1%A7#5137217861'&gt;一个帖子&lt;/a&gt;，是用一个曲面方程画出一颗立体的心形，于是乎，我就委托Mr. R照着方程的样子也画了一颗。&lt;/p&gt;

&lt;p&gt;方程的形式虽然简洁，但画起来可不容易，每画一个点就要解一个方程，而且经常出现斜率不存在的点，所以如果只从一个方向上来画，难免会得出NA解，使得原本光滑的曲面出现很多漏洞（如下图）。&lt;/p&gt;

&lt;p&gt; &lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2009/10/h01.png'&gt;&lt;img alt='h01' src='http://yixuan.cos.name/cn/wp-content/uploads/2009/10/h01.png' /&gt;&lt;/a&gt; &lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2009/10/h02.png'&gt;&lt;img alt='h02' src='http://yixuan.cos.name/cn/wp-content/uploads/2009/10/h02.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;就因为这样，暂时的解决办法就是从两个相互垂直的方向分别画出曲面，然后把它们重叠起来，将各自的漏洞都填补好。最后再利用rgl包的贴图功能，在心上“贴好”五星红旗，一颗中国心就完成了。&lt;/p&gt;

&lt;p&gt;&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2009/10/heart_snapshot01.png'&gt;&lt;img alt='heart_snapshot01' src='http://yixuan.cos.name/cn/wp-content/uploads/2009/10/heart_snapshot01.png' /&gt;&lt;/a&gt; &lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2009/10/heart_snapshot02.png'&gt;&lt;img alt='heart_snapshot02' src='http://yixuan.cos.name/cn/wp-content/uploads/2009/10/heart_snapshot02.png' /&gt;&lt;/a&gt; &lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2009/10/heart_snapshot03.png'&gt;&lt;img alt='heart_snapshot03' src='http://yixuan.cos.name/cn/wp-content/uploads/2009/10/heart_snapshot03.png' /&gt;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;附：R源文件和用来贴图的国旗（因为贴图的位置需要做了镜像变换）。点击&lt;a href='http://yixuan.cos.name/cn/wp-content/uploads/2009/10/myChina.zip'&gt;这里&lt;/a&gt;下载。&lt;/p&gt;

&lt;p&gt;运行程序时设好工作空间，可能会有些慢，想要加快些速度可以把程序中的n=100改小一些，当然图形的精细度会略微差些。&lt;/p&gt;

&lt;p&gt;另：老大说可以放到fun包里，那是不是得“普世”一点了？比如贴个R上去？:)&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>平生第一个PHP程序</title>
   <link href="http://yixuan.github.com/2009/10/my-first-php-program"/>
   <updated>2009-10-02T21:29:22+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/10/my-first-php-program</id>
   <content type="html">&lt;p&gt;一波未平，一波又起。刚把图片的居中和背景搞定，突然发现文章的自动摘要又出问题了。山寨版学院网站用的是WP Kit CN的插件，但不知为什么，字数控制总是不好使，不管怎么样都会把第一段整个显示出来，好像只能控制段落数而不能控制字数。我看COS用的也是这个插件，怎么就可以精确做到250个字呢？&lt;/p&gt;

&lt;p&gt;后来想研究一下插件的代码，但这对于我这个PHP盲来说实在太困难了，光找到那个起作用的函数就花了好长时间。之后半猜半蒙查函数库，算是大概知道怎么回事了，不过得到的结果有点让我吃惊。那个函数里面貌似是通过换行符号“\n”来划分“单词”的，也就是说如果内容本身的分段不多，那么这个函数就基本上没有什么效果了。&lt;/p&gt;

&lt;p&gt;我目前对摘要的一个想法是，如果文章有多段，那么摘要就只显示第一段；如果第一段太长，那么再精简句子。有了这个想法后我就开始硬着头皮把WP Kit CN插件的wp-kit-cn.class.php文件（摘要函数所在的文件）进行改写，最后把里面的&lt;code&gt;WKC_excerpt()&lt;/code&gt;函数改成了下面的语句：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function WKC_excerpt ($text){
	global $post;
	remove_filter(&amp;#39;the_excerpt&amp;#39;, &amp;#39;mul_excerpt&amp;#39;);
	remove_filter(&amp;#39;the_excerpt_rss&amp;#39;, &amp;#39;mul_excerpt&amp;#39;);
	if ( &amp;#39;&amp;#39; == $text ) {
		$text = $post-&amp;gt;post_content;
		$text = apply_filters(&amp;#39;the_content&amp;#39;, $text);
		$text = str_replace(&amp;#39;]]&amp;gt;&amp;#39;, &amp;#39;]]&amp;gt;&amp;#39;, $text);
		$text = strip_tags($text);
		$text = trim($text);
		$wordnum = $this-&amp;gt;options[&amp;#39;excerpt_words_number&amp;#39;];
		$firstpara=explode(&amp;quot;\n&amp;quot;, $text);
		$text=$firstpara[0];
		$text=$this-&amp;gt;cut_str($text,$wordnum);
		$words = explode(&amp;quot;。&amp;quot;, $text);
		$output = &amp;#39;&amp;#39;;
		if ( count($words) == 1 ) {
			$output=$text;
		}else{
			for($i=0;$i&amp;lt;count($words)-1;$i++){
				$output.=$words[$i].&amp;#39;。&amp;#39;;
			}
		}
		$output.=&amp;#39;……&amp;#39;;
		return $output;
	}
	return $text;
}&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其中有些函数和变量是来自这个文件的其它地方，要查看全部的代码的话可以到&lt;a href='http://wordpress.org/extend/plugins/wp-kit-cn/'&gt;http://wordpress.org/extend/plugins/wp-kit-cn/&lt;/a&gt;去下载插件。这段程序的意思大概就是先提取文本的第一段，然后截取前&lt;code&gt;$wordnum&lt;/code&gt;（通过WP Kit CN的设置获取）个字符，再判断这段文字中有多少个句号，如果没有句号就全部返回，如果有就返回最后一个句号前的所有文本，最后再加上一个意味深长的省略号，就算是完成了。&lt;/p&gt;

&lt;p&gt;这段程序其实非常粗糙，首先是没有加上“阅读全文”之类的超链接，我这里是因为模版会在另外一个函数中提供，所以就删了，其实插件原来的文件中是有的；然后就是分句的条件太过简单，没有考虑问号感叹号之类的，不过感觉学院网站的新闻不太可能出现这些符号，所以就偷懒没改。&lt;/p&gt;

&lt;p&gt;不管怎么说吧，好歹是自己的第一个PHP程序，就在此纪念一下吧。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>让Windows XP实现所有类型文件的包含文字搜索</title>
   <link href="http://yixuan.github.com/2009/10/enable-winxp-to-search-content-of-all-types-of-files"/>
   <updated>2009-10-01T23:09:13+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/10/enable-winxp-to-search-content-of-all-types-of-files</id>
   <content type="html">&lt;p&gt;最近几天都在弄WP的模版，虽然我一直是怀着无比崇敬的心情去研究那些免费提供的模版，但再好的模版总会有一些细节不合你的心意——倒不是因为功能太少了，而是因为功能太多以至于有些东西你不想放在页面上。当然了，这对于我这个htmlxmljavascriptphpcss的初级未入门者来说是个好消息——改不过还注释不过吗？&lt;/p&gt;

&lt;p&gt;于是乎目前的工作基本上就是找到恰当的模版的恰当的页面然后恰当地注释掉那些显示我不想显示的东西的函数，而我感觉在一大堆PHP语句中找到那些函数的定义简直就跟炼狱一般。最后实在不行就准备用Windows XP的包含文字搜索功能，在文件夹中递归搜索文件。但是曾经有一段时间怎么也搜不出来，后来才知道，原来Windows XP默认的情况是只搜索特定的几种文件类型，比如&lt;em&gt;.txt，而&lt;/em&gt;.php却不在其中。&lt;/p&gt;

&lt;p&gt;接着就是百度Google一齐上，找到了一个解决方案：&lt;a href='http://www.phpx.com/happy/thread-109195-1-1.html'&gt;http://www.phpx.com/happy/thread-109195-1-1.html&lt;/a&gt;。我用的是第二种方法，感觉直观些，就是找到注册表中的HKEY_LOCAL_MACHINE\SYSTEM\ControlSet\Control\ContentIndex，然后把FilterFilesWithUnknownExtensions子键的值改为1。之后就可以搜索到php文件里面的内容了。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>骧</title>
   <link href="http://yixuan.github.com/2009/09/horse-with-the-right-hind-foot-in-whit"/>
   <updated>2009-09-29T10:59:59+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/09/horse-with-the-right-hind-foot-in-whit</id>
   <content type="html">&lt;blockquote&gt;
&lt;p&gt;骧，后右蹄白色的马。&lt;/p&gt;

&lt;p&gt;后右足白骧。——《尔雅·释畜》&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这种字不选作中文GRE词汇真是可惜了……&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>这个可以点</title>
   <link href="http://yixuan.github.com/2009/09/you-can-click-on-them"/>
   <updated>2009-09-27T23:54:52+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/09/you-can-click-on-them</id>
   <content type="html">&lt;p&gt;右上角的AA&amp;lt;&amp;gt;和最底下的“^”，模版作者都设计好了。&lt;/p&gt;

&lt;p&gt;嗯，没了。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>折腾网站的好方法——XAMPP</title>
   <link href="http://yixuan.github.com/2009/09/use-xampp-to-test-website"/>
   <updated>2009-09-26T20:40:55+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/09/use-xampp-to-test-website</id>
   <content type="html">&lt;p&gt;刚刚学习WordPress少不了一番折腾，不过经常遇到的一个麻烦是担心不当的修改会破坏原有的网页。一个可选的做法是用一个备份镜像做测试，不过在网络上操作毕竟有些不便，比如用FTP传输文件有时候还是挺麻烦的。&lt;/p&gt;

&lt;p&gt;前段时间在&lt;a href='http://fairyfish.net/2007/06/25/installing-wordpress-locally/'&gt;一个网站&lt;/a&gt;上看到一种方法是在本地安装一个网页服务器，然后把网站的所有文件都放到本地机上，通过网页服务器软件就可以在浏览器中访问这些内容。这样的好处就是在本地修改文件，就能在浏览器中及时看到修改的结果，无需再通过FTP进行增删改操作。&lt;/p&gt;

&lt;p&gt;实现的办法就是下载一个名叫XAMPP的软件，网址是&lt;a href='http://www.apachefriends.org/zh_cn/xampp.html'&gt;http://www.apachefriends.org/zh_cn/xampp.html&lt;/a&gt;，之前那个网站上也有很详细的说明。我是在Ubuntu下用的，软件的官网也有安装步骤，基本上就是直接解压就行，不需要编译安装，非常方便。唯一要注意的是，在Linux下按照提示提示运行程序可能会提示下面的错误：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Syntax error: &amp;quot;(&amp;quot; unexpected&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出现这种情况时，只需要找到XAMPP安装的目录，打开lampp这个文件，把第一行的&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;改成&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;就可以了。&lt;/p&gt;

&lt;p&gt;之后把网站文件塞到/opt/lampp（或其它的安装目录）/htdocs中就行了，比如就是wordpress文件夹。运行启动服务的命令后，在浏览器中输入http://localhost/wordpress（对应于放进去的文件夹名）就可以在本地安装、测试和折腾WordPress了。&lt;/p&gt;</content>
 </entry>
 
 <entry>
   <title>前言</title>
   <link href="http://yixuan.github.com/2009/09/preface"/>
   <updated>2009-09-21T11:01:18+08:00</updated>
   <id>hhttp://yixuan.github.com/2009/09/preface</id>
   <content type="html">&lt;p&gt;一千八百年前，有一个人对另一个人说，我现在没有立身之地，你把荆州借给我吧，等我取下了西蜀就还你。&lt;/p&gt;

&lt;p&gt;一千八百年后，有一个人对另一个人说，我现在没有网络空间，你借一块地给我吧，等我买了自己的就还你。&lt;/p&gt;

&lt;p&gt;于是乎，在浩瀚的COS版图上，这一个人抢占了一个山头，自立为寇。&lt;/p&gt;

&lt;p&gt;这个人会不会成为一千八百年前的那个人，我不知道……&lt;/p&gt;</content>
 </entry>
 
 
</feed>